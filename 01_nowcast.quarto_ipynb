{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Nowcasting inflation with neural networks\n",
        "description: A simple, mixed-frequency example\n",
        "output-file: nowcast.html\n",
        "authors: \n",
        "  - Douglas K. G. Araujo\n",
        "  - Johannes Damp\n",
        "code-fold: show\n",
        "code-tools: true\n",
        "number-sections: true\n",
        "jupyter: python3\n",
        "warning: false\n",
        "fig-cap-location: top\n",
        "---\n",
        "\n",
        "\n",
        "This notebook showcases how to set up neural networks to nowcast inflation using data measured in different frequencies. The goal here is to start with a very simple dataset containing only two variables, inflation (monthly) and oil prices (daily), to slowly build up a more complex neural network based nowcasting model, the TFT-MF available in `gingado` from its v0.3.0.\n",
        "\n",
        "Nowcasting is essentially the use of the most current information possible to estimate in real time an economic series of interest such as inflation or GDP before it is actually released[^review]. For example, if you could measure all prices every day, you could create on the last day of the month a very accurate nowcast for the headline inflation for that month - which would only be officially published a few days later. In the case of GDP, this lag between the end of the reference period and actual publication tends to be significant, around 6-10 weeks. For policymakers, investors and other decision-makers, a lot can happen in this period.\n",
        "\n",
        "[^review]: @giannone2008nowcasting pioneered nowcasting in macroeconomics. See @bok2018nowcasting for a review.\n",
        "\n",
        "A related use of nowcasting is to estimate what the current period's reading will be as this period rolls out. In other words, estimating today what the inflation reading for this month (or GDP for this quarter) will likely be as new information is unveiled in real time.\n",
        "\n",
        "The nowcasting model available in `gingado` from v0.3.0 onwards is an adjusted version of the Temporal Fusion Transformer (TFT) of @lim2021temporal. This architecture combines *flexibility* to take on multiple datasets while learning which information to focus on and *interpretability* to provide insights on the important variables in each case. Empirical results with the TFT in finance and economics settings include stock prices (@hu2021stock, @diaz2024causality) and GDP (@laborda2023multi).\n",
        "\n",
        "## Roadmap\n",
        "\n",
        "The TFT model can be a bit complex to understand at first, so we will build it up, step by step. After loading the data in @sec-data, the most basic neural network - a neuron layer - is presented in @sec-fc. Then a simple extension is shown where a neural network learns which data to let through or not in @sec-glu. Armed with these elements, @sec-lstm discusses the next architecture, more suitable for time series. Next, these elements are combined in @sec-gates to show how the model knows what to focus on. @sec-timeembed introduces the concept of embeddings of categorical variables, while @sec-encodcont explores this in the context of continuous variables. All this content is then put together in a way that dynamically selects useful inputs for each instance in @sec-varsel. The next component is the self-attention layer in @sec-transf. Finally, if you want to see the full picture directly, go to @sec-tftmf to see how these elements are put together. @sec-nowcast then trains the model and presents the results for this simple, illustrative nowcasting.\n",
        "\n",
        "## Loading the packages[^mac] and data {#sec-data}\n",
        "\n",
        "[^mac]: Mac users might need to include the following line after importing the package `os` and before importing `keras`: `os.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"`.\n",
        "\n",
        "Let's use our SDMX connectors to find and download data from official sources in a reproducible way.\n",
        "\n",
        "To abstract from currency issues, we will use US inflation and oil prices, which are denominated in US dollars.\n"
      ],
      "id": "a0963b6e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: load packages\n",
        "import os\n",
        "os.environ[\"KERAS_BACKEND\"] = \"tensorflow\" # or \"torch\", \"jax\" according to user preference\n",
        "import keras\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sdmx\n",
        "from gingado.utils import load_SDMX_data\n",
        "from sklearn.feature_selection import VarianceThreshold\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from tqdm import tqdm\n",
        "from typing import Callable"
      ],
      "id": "load-packages",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Inflation\n",
        "\n",
        "Since this is a monthly nowcast of inflation, the best way to do this is to use a *monthly change in the consumer price index*, $\\pi_t^{(m)}=(\\text{CPI}_t - \\text{CPI}_{t-1})/\\text{CPI}_{t-1}$, not the year-on-year rate, $\\pi_t^{(y)}=(\\text{CPI}_t - \\text{CPI}_{t-12})/\\text{CPI}_{t-12}$, which is how people usually think of inflation. This is because we want to nowcast only the value at the margin; 11 twelfths of $\\pi_t^{(y)}$ are already known, since $\\pi_t^{(y)} = -1 + \\prod_{l=0}^{11} (1+\\pi_{t-l})$.\n",
        "\n",
        "Then, only at the end we combine rolling windows of 12 consecutive monthly inflation rates, of which only the last one or two are estimated, to correctly create an annual inflation rate. \n",
        "\n",
        "Formally, if we know all values except the current and last month's, then: \n",
        "$$\n",
        "\\hat{\\pi}_t^{(y)}=(\\prod_{l=0}^1 (1+\\hat{\\pi}_{t-l}^{(m)}) \\prod_{l=2}^{11} (1+\\pi_{t-l}^{(m)}) )-1,\n",
        "$$ {#eq-finalnowcast}\n",
        "\n",
        "where the hat notation ($\\hat{\\pi}$) means that a particular value was estimated.\n",
        "\n",
        "For inflation, we take a dataflow from the [BIS](https://data.bis.org/topics/CPI), since we are looking for US data. Let's explore it first and then choose the correct data specifications to download the time series.[^sdmx]\n",
        "\n",
        "[^sdmx]: See [here](https://sdmx1.readthedocs.io/en/latest/walkthrough.html) for a practical walkthrough showing how to explore data with SDMX.\n"
      ],
      "id": "8322d461"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: inflation dataflow\n",
        "BIS = sdmx.Client(\"BIS\")\n",
        "cpi_msg = BIS.dataflow('WS_LONG_CPI')\n",
        "cpi_dsd = cpi_msg.structure"
      ],
      "id": "inflation-dataflow",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "These are all possible keys:\n"
      ],
      "id": "b10e0c3d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: CPI_dimensions\n",
        "cpi_dsd['BIS_LONG_CPI'].dimensions.components"
      ],
      "id": "CPI_dimensions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For example, \"FREQ\" (frequency) takes in these values:\n"
      ],
      "id": "da6d80dc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: FREQ_codelist\n",
        "cl__FREQ = sdmx.to_pandas(cpi_dsd['BIS_LONG_CPI'].dimensions.get(\"FREQ\").local_representation.enumerated)\n",
        "cl__FREQ"
      ],
      "id": "FREQ_codelist",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "And \"REF_AREA\" (reference area) can be set to:\n"
      ],
      "id": "f61c6c6e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: REF_AREA_codelist\n",
        "cl__REF_AREA = sdmx.to_pandas(cpi_dsd['BIS_LONG_CPI'].dimensions.get(\"REF_AREA\").local_representation.enumerated)\n",
        "cl__REF_AREA"
      ],
      "id": "REF_AREA_codelist",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We can check that the US is amongst the reference areas:\n"
      ],
      "id": "12948edb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: check US in REF_AREA codelist\n",
        "cl__REF_AREA['US']"
      ],
      "id": "check-US-in-REF_AREA-codelist",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, the \"UNIT_MEASURE\" values can be:\n"
      ],
      "id": "a984b321"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: codelist for UNIT_MEASURE in dataflow BIS__WS_LONG_CPI\n",
        "cl__UNIT_MEASURE = sdmx.to_pandas(cpi_dsd['BIS_LONG_CPI'].dimensions.get(\"UNIT_MEASURE\").local_representation.enumerated)\n",
        "cl__UNIT_MEASURE"
      ],
      "id": "codelist-for-UNIT_MEASURE-in-dataflow-BIS__WS_LONG_CPI",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In the [BIS website for this data](https://data.bis.org/topics/CPI#faq), we can see that the unit in levels is `Index, 2010 = 100` (the other one is `Year-on-year changes, in per cent`, which as discussed above we don't want for this case.)\n"
      ],
      "id": "c429b825"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: finding code for index\n",
        "cl__UNIT_MEASURE[cl__UNIT_MEASURE.str.contains(\"Index, 2010 = 100\")]"
      ],
      "id": "finding-code-for-index",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Armed with this knowledge, we can now download monthly consumer price index data for the US. Let's start after 1985 so that we have a sufficiently long history but without too much influence of the tectonic shift of the US dollar devaluation in the early 1970s and ensuing high inflation:\n"
      ],
      "id": "09b39987"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-cpi\n",
        "#| fig-cap: 'US consumer price index, 2010 = 100'\n",
        "df_infl = load_SDMX_data(\n",
        "    sources={\"BIS\": \"'WS_LONG_CPI'\"},\n",
        "    keys={\"FREQ\": \"M\", \"REF_AREA\": \"US\", \"UNIT_MEASURE\": \"628\"},\n",
        "    params={\"startPeriod\": 1985}\n",
        ")\n",
        "\n",
        "df_infl.plot()"
      ],
      "id": "fig-cpi",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "As you can see in @fig-cpi, we downloaded the series $\\{\\text{CPI}_t\\}$. Transforming that into $\\{\\pi_t\\}$, defined above, we have:\n"
      ],
      "id": "74cdb4d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-pi\n",
        "#| fig-cap: US monthly inflation rate\n",
        "fig, ax = plt.subplots()\n",
        "plt.axhline(y=0, linewidth=1.5, color=\"black\")\n",
        "df_infl_m = df_infl.pct_change().dropna()\n",
        "df_infl_m.index = df_infl_m.index + pd.offsets.MonthEnd(0) # move to month end\n",
        "df_infl_m.plot(ax=ax)\n",
        "plt.show()"
      ],
      "id": "fig-pi",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Oil prices\n",
        "\n",
        "Since the focus is on US inflation, below we get WTI oil prices. This data is downloaded from the [St Louis Fed's FRED webpage](https://fred.stlouisfed.org/series/DCOILWTICO).\n"
      ],
      "id": "a724946f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-oil\n",
        "#| fig-cap: WTI oil prices\n",
        "df_oil = pd.read_csv(\"docs/DCOILWTICO.csv\")\n",
        "df_oil['DCOILWTICO'] = pd.to_numeric(df_oil['DCOILWTICO'], errors='coerce')\n",
        "df_oil['DATE'] = pd.to_datetime(df_oil['DATE'])\n",
        "df_oil.set_index('DATE', inplace=True)\n",
        "\n",
        "df_oil.plot()"
      ],
      "id": "fig-oil",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For the nowcasting, we are interested in the daily variation, clipped because of the sharp movements during the onset of the Covid-19 pandemic:\n"
      ],
      "id": "ba45a551"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-oilD\n",
        "#| fig-cap: Daily change in WTI oil prices\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "plt.axhline(y=0, linewidth=1.5, color=\"black\")\n",
        "df_oil_d = df_oil.pct_change().dropna()\n",
        "df_oil_d.plot(ax=ax)\n",
        "plt.ylim(-0.25, 0.25)\n",
        "plt.show()"
      ],
      "id": "fig-oilD",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Temporal features (not implemented for the time being)\n",
        "\n",
        "There is a lot of information encoded in the temporal features of a time series: which day in the month it is, which month of the year, etc. For example, consider how consumers behave differently in response to oil prices over warmer months (when many decide or not to travel, and how far) compared to colder months (when energy prices factor in heating and is thus perhaps less elastic).\n",
        "\n",
        "To simplify notation about time, instead of the usual subscript $t$ as above to denote a time period, for precision about the frequency, we will follow this convention:\n",
        "\n",
        "- subscript $m$ denotes a given month;\n",
        "\n",
        "- subscript $d$ denotes a given day;\n",
        "\n",
        "- subscript $d(m)$ denotes a given day in a given month; example: $d(m-1)$ is a day in the previous month.\n",
        "\n",
        "`gingado` offers a practical way to set up the temporal features that requires only the dates of the dataset.\n"
      ],
      "id": "fb2f6765"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tempfeatures\n",
        "\n",
        "# NOTE: to add documentation and tests, and later incorporate as a new function in gingado.utils\n",
        "\n",
        "def get_timefeat(df, freq=\"d\", features=None, add_to_df=False, remove_const=False):\n",
        "    # For the future documentation: the add_to_df argument should be True if the data will be fed to an algorithm that takes in all data at once. If, like neural networks, the inputs are fed through different \"pipelines\", then use False and then take the result from this function an feed it separately to a neural network.\n",
        "    # the frequency is used to filter which features to add. For example, if monthly then no higher frequency features (day of ..., week of... ) are added because it doesn't make sense\n",
        "    # None or list. if futures is None, then add all temporal features that the frequency above allows. Otherwise adds only the names ones\n",
        "    all_freqs = [\"q\", \"m\", \"w\", \"d\"]\n",
        "    \n",
        "    if not pd.api.types.is_datetime64_any_dtype(df.index):\n",
        "        df.index = pd.to_datetime(df.index)\n",
        "\n",
        "\n",
        "    def i2s(index, df=df):\n",
        "        # mini-helper func that transforms an index into a pandas Series with the index\n",
        "        return pd.Series(index, index=df.index)\n",
        "    dict_timefeat = {}\n",
        "\n",
        "    if freq in all_freqs:\n",
        "        dict_timefeat['year_end'] = i2s(df.index.to_series().apply(lambda x: 1 if x.is_year_end else 0))\n",
        "        dict_timefeat['quarter_of_year'] = i2s(df.index.quarter - 1)\n",
        "        dict_timefeat['quarter_end'] = i2s(df.index.to_series().apply(lambda x: 1 if x.is_quarter_end else 0))\n",
        "\n",
        "    if freq in [f for f in all_freqs if f not in [\"y\", \"q\"]]:\n",
        "        dict_timefeat['month_of_quarter'] = i2s(df.index.to_series().apply(lambda x: (x.month - 1) % 3))\n",
        "        dict_timefeat['month_of_year'] = i2s(df.index.month - 1)\n",
        "\n",
        "    if freq in [f for f in all_freqs if f not in [\"y\", \"q\", \"m\"]]:\n",
        "        dict_timefeat['week_of_month'] = i2s(df.index.to_series().apply(lambda x: (x.day - 1) // 7))\n",
        "        dict_timefeat['week_of_quarter'] = i2s(df.index.to_series().apply(lambda x: ((x - pd.Timestamp(f'{x.year}-{(x.month - 1) // 3 * 3 + 1}-01')).days // 7)))\n",
        "        dict_timefeat['week_of_year'] = i2s(df.index.isocalendar().week)\n",
        "\n",
        "    if freq == \"d\":\n",
        "        dict_timefeat['day_of_week'] = i2s(df.index.dayofweek)\n",
        "        dict_timefeat['day_of_month'] = i2s(df.index.day)\n",
        "        dict_timefeat['day_of_quarter'] = i2s(df.index.to_series().apply(lambda x: (x - pd.Timestamp(f'{x.year}-01-01')).days % 91))\n",
        "        dict_timefeat['day_of_year'] = i2s(df.index.dayofyear)\n",
        "\n",
        "    # Convert the dictionary of columns to a DataFrame\n",
        "    df_timefeat = pd.concat(dict_timefeat, axis=1)\n",
        "    if features:\n",
        "        df_timefeat = df_timefeat[features]\n",
        "\n",
        "    if remove_const:\n",
        "        var_thresh = VarianceThreshold(threshold=0)\n",
        "        df_timefeat = var_thresh.fit_transform(df_timefeat)\n",
        "        df_timefeat = pd.DataFrame(df_timefeat, columns=var_thresh.get_feature_names_out(), index=df.index).astype(int)\n",
        "\n",
        "    if add_to_df:\n",
        "        return pd.concat([df, df_timefeat], axis=1)\n",
        "    else:\n",
        "        return df_timefeat"
      ],
      "id": "tempfeatures",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Specifically, temporal features are an excellent (and rare) type of *known future* input. Those are the data that we know will be like that during forecasting time, ie, at the time the observation $y_t$ takes place. For example, it is trivial to know the day of the week, of the month etc, for any date we are forecasting in.\n",
        "\n",
        "For this reason, we now calculate the temporal features of inflation.\n"
      ],
      "id": "bf461814"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: temporal features for the inflation series\n",
        "\n",
        "df_timefeat = get_timefeat(df_infl_m, freq=\"m\")"
      ],
      "id": "temporal-features-for-the-inflation-series",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Splitting the dataset\n",
        "\n",
        "We will now split the dataset into training data up until end-2020 and validation data afterwards. The training data will be further split into 5 temporally sequential folds.[^tssplit]\n",
        "\n",
        "[^tssplit]: See [here](https://scikit-learn.org/stable/modules/cross_validation.html#time-series-split) for more information on time series splitting.\n",
        "\n",
        "To simplify, we will consider valid nowcasting *input* data for a given output in period $m$ as:\n",
        "\n",
        "- all monthly data up to, and including, $m-1$; and\n",
        "\n",
        "- all daily data up to, and including, $d(m)$.\n"
      ],
      "id": "9978da04"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: time series splits\n",
        "\n",
        "# Training date cutoff\n",
        "cutoff = \"2020-12-31\"\n",
        "\n",
        "y_train, y_test = df_infl_m[:cutoff][1:], df_infl_m[cutoff:][1:]\n",
        "Xm_train, Xm_test = df_infl_m[:cutoff][:-1], df_infl_m[cutoff:][:-1]\n",
        "Xd_train, Xd_test = df_oil_d[:cutoff], df_oil_d[cutoff:]\n",
        "\n",
        "X_train = {\"m\": Xm_train, \"d\": Xd_train}\n",
        "X_test = {\"m\": Xm_test, \"d\": Xd_test}"
      ],
      "id": "time-series-splits",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now for every month $m$ in the dependent variable, we can find all $m_{t-l}, l\\geq 1$ and all $d(m_{t-s}), s\\geq 0$.\n",
        "\n",
        "Note that in the example below, for each data point that we want to forecast (`y`), we take 12 lags of the monthly covariates and 250 lags of the daily covariates (broadly corresponding to one year).\n"
      ],
      "id": "3c4e5f6d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: create data\n",
        "\n",
        "maxlags = {\"m\": 12, \"d\": 250}\n",
        "\n",
        "def create_data(X, y, maxlags=maxlags, tscv=TimeSeriesSplit(n_splits=5), timedim=True, return_dates=False):\n",
        "    # If timeedim is true, then the dimensions of the tensors are n_samples/time dimension/features. If not then it is n_samples/time dimension (lag) * features, ie each lag is flattened as if it were a feature. Use True when passing to recurrent nets, use False for fully connected layers.\n",
        "    X_split = {}\n",
        "    y_split = {}\n",
        "    if return_dates:\n",
        "        X_dates = {}\n",
        "    n_feat = {k: v.shape[1] for k, v in X.items()}\n",
        "    if tscv:\n",
        "        split_cv = tscv.split(y)\n",
        "        cv_dates = [\n",
        "            (y.index[m], y.index[n]) # (train, valid) for each fold\n",
        "            for m, n in split_cv\n",
        "        ]\n",
        "        for n_fold, split in enumerate(cv_dates):\n",
        "            fold = f\"fold_{n_fold}\"\n",
        "            dates_split = {\n",
        "                \"train\": split[0],\n",
        "                \"valid\": split[1]\n",
        "            }\n",
        "            X_split[fold] = {\"train\": [], \"valid\": []}\n",
        "            y_split[fold] = {\"train\": [], \"valid\": []}\n",
        "            if return_dates:\n",
        "                X_dates[fold] = {\"train\": [], \"valid\": []}\n",
        "            for chunk, dates in dates_split.items():\n",
        "                for ysample_date in tqdm(dates):\n",
        "                    padded_x = {}\n",
        "                    dates_X = {}\n",
        "                    for f in X.keys():\n",
        "                        try:\n",
        "                            if return_dates:\n",
        "                                dates_X[f] = X[f][:ysample_date][:-1].index\n",
        "                            to_pad = X[f][:ysample_date][:-1].values\n",
        "                        except KeyError:\n",
        "                            to_pad = np.zeros((1,1))\n",
        "                        padded_x[f] = keras.utils.pad_sequences([to_pad], maxlen=maxlags[f], dtype=np.float32)\n",
        "                        \n",
        "                        x_shape = (1, maxlags[f], n_feat[f]) if timedim else (1, maxlags[f] * n_feat[f])\n",
        "                        \n",
        "                        padded_x[f] = padded_x[f].reshape(x_shape)\n",
        "                    X_split[fold][chunk].append(padded_x)\n",
        "                    y_split[fold][chunk].append(y_train.loc[ysample_date])\n",
        "                    if return_dates:\n",
        "                        X_dates[fold][chunk].append(dates_X)\n",
        "        if return_dates:\n",
        "            return X_split, y_split, X_dates\n",
        "        return X_split, y_split\n",
        "\n",
        "X_train_split, y_train_split, dates = create_data(X=X_train, y=y_train, maxlags=maxlags, return_dates=True)"
      ],
      "id": "create-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's see how this time series fold will be structured. Each fold is a sequentially longer window, so we get the following data points:[^difflengths]\n",
        "\n",
        "[^difflengths]: The division of the data between folds might produce slightly unequal-sized folds, as can be seen in the current example. \n"
      ],
      "id": "d5e2d407"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Create batches of data\n",
        "\n",
        "for fold in y_train_split.keys():\n",
        "    print(f\"{fold}:\")\n",
        "    print(f\"  {len(y_train_split[fold]['train'])} training X-y pairs\")\n",
        "    print(f\"  {len(y_train_split[fold]['valid'])} validation X-y pairs\")"
      ],
      "id": "Create-batches-of-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Another way to visualise this is in @fig-tssplit, which shows a similar division of dataset along the time dimension, albeit for four folds.\n",
        "\n",
        "::: {#fig-tssplit}\n",
        "\n",
        "![Time series split illustration](https://scikit-learn.org/stable/_images/sphx_glr_plot_cv_indices_013.png){fig-scap='Source: scikit-learn.org'}\n",
        "\n",
        ":::\n",
        "## A simple, fully connected neural network {#sec-fc}\n",
        "\n",
        "The goal of this model is to nowcast $\\pi_t$ based on its past values $\\pi_{t-1}$ and on current oil prices $o_{d(m-s)}, s \\geq 0$. The first model we will train is a very simple neural network:\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\xi &= \\phi(\\mathbf{W}_1 x_t + \\mathbf{b}_1) \\\\\n",
        "y_t &= \\mathbf{W}_2 \\xi + \\mathbf{b}_2,\n",
        "\\end{align}\n",
        "$$ {#eq-model0nnlayer}\n",
        "\n",
        "where $x_t$ is the input data and the subscript of parameters relates to the \"depth\" of the layer they belong to. Using $\\lambda$ as the dimensionality of the model, $\\mathbf{W}_2 \\in \\mathbb{R}^{1 \\times \\lambda}$, $b_2 \\in \\mathbb{R}$, $\\mathbf{W}_1 \\in \\mathbb{R}^{\\lambda \\times |x_t|}$, $b_1 \\in \\mathbb{R}^{d}$, $\\xi \\in \\mathbb{R}^\\lambda$ and $\\phi$ is an activation function. For simplicity, we will use the ReLU activation function, which is simply: $\\phi(z) = \\text{max}(z, 0)$.\n",
        "\n",
        "For this neural network, we need a fix dimensionality of the input data. In other words, the network *needs* to know how much data it will take in at any given time, and this should not change throughout training or inference time.\n",
        "\n",
        "For each data in our dependent variable, we simply stack the latest available monthly and daily data and their respective lags. Using the numbers above, this would be 12 lags for monthly data  and 250 lags of daily oil data. Linking this to @eq-model0nnlayer above, $x_t = [\\pi_{m-1}, \\dots, \\pi_{m-12}, o_d, \\dots, o_{d-250}]$. \n",
        "\n",
        "All of this data will be considered by the neural network at the same time. In a way, this is analogous to how a normal regression is run. However, the number of data points (12 + 250) used in this toy neural network is bigger than typical regressions.\n"
      ],
      "id": "34137c47"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-nn_fc_summary\n",
        "#| tbl-cap: Summary of fully connected model\n",
        "\n",
        "def createNN_fc(dim=16, activation=\"relu\"):\n",
        "    nn_fc = keras.Sequential([\n",
        "        keras.layers.Input(shape=(sum([v for v in maxlags.values()]),)),\n",
        "        keras.layers.Dense(units=dim, activation=activation, name=\"SummariseInput\"),\n",
        "        keras.layers.Dense(units=1, name=\"CalculateOutput\")\n",
        "    ], \"FullyConnected\")\n",
        "\n",
        "    nn_fc.compile(loss=keras.losses.MeanSquaredError())\n",
        "    return nn_fc\n",
        "\n",
        "nn_fc = createNN_fc()\n",
        "nn_fc.summary()"
      ],
      "id": "tbl-nn_fc_summary",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "@fig-arch_fc presents the architecture of this model.\n"
      ],
      "id": "2a727240"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_fc\n",
        "#| fig-cap: Architecture of the model with fully connected layer\n",
        "\n",
        "keras.utils.plot_model(nn_fc, show_shapes=True, show_layer_names=True, show_layer_activations=True)"
      ],
      "id": "fig-arch_fc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note in @fig-arch_fc that a first dense layer (ie, as in @eq-model0nnlayer) takes in 262 data points, uses the activation function ReLU, and then outputs 16 data points for the next layer.[^NoneDim]\n",
        "\n",
        "[^NoneDim]: Ignore the `None` in the shapes; this means the dimensionality along that axis depends on each case. Specifically, the first dimension of the shapes in keras are always the number of samples going in the model. Because this varies with every training, application, etc, it is not fixed as the other dimensions are. Another way of thinking about this is as follows: in a regression, you know exactly how many variables you need to have, but the number of data points can vary.\n",
        "\n",
        "Checking that it works. In the code below, we take the last fold as an example. \n"
      ],
      "id": "b0a5278e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: preparing fully connected NN data\n",
        "X_train_split_fc, y_train_split_fc = create_data(X=X_train, y=y_train, timedim=False)\n",
        "\n",
        "fold = \"fold_4\"\n",
        "X_train_fc = np.array([np.concatenate([np.squeeze(v) for v in sample.values()]) for sample in X_train_split_fc[fold][\"train\"]])\n",
        "y_train_fc = np.array(y_train_split_fc[fold][\"train\"])\n",
        "X_valid_fc = np.array([np.concatenate([np.squeeze(v) for v in sample.values()]) for sample in X_train_split_fc[fold][\"valid\"]])\n",
        "y_valid_fc = np.array(y_train_split_fc[fold][\"valid\"])"
      ],
      "id": "preparing-fully-connected-NN-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we train the network.\n"
      ],
      "id": "d1221b76"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fit nn model\n",
        "\n",
        "history_fc = nn_fc.fit(x=X_train_fc, y=y_train_fc, validation_data=(X_valid_fc, y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fit-nn-model",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "You can see in @fig-history_fc that the loss decreases with training, but the validation loss (ie, calculated on held-out data) is higher than the in-sample loss. This suggests the model is learning *too much* how to fit the data. In other words, it is also fitting some level of noise, which is not reproducible out-of-sample.\n"
      ],
      "id": "9ab5d075"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_fc\n",
        "#| fig-cap: 'Losses calculated in a simple, fully-connected neural network.'\n",
        "\n",
        "ax = pd.DataFrame(history_fc.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_fc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We don't need to bother training too much this very simple neural network; the goal here is to use it as a building block for a mathematical/econometric intuition of the broader nowcasting model.\n",
        "\n",
        "## A useful tool: a gate {#sec-glu}\n",
        "\n",
        "The network trained in the previous section can learn how to map the input data to the output data. But there are ways to take advantage of the incredible flexibility in architecture (ie, how neural layers are stacked). One such way is to have the data inform which layers's outputs are actually used downstream or not. This section describes how.\n",
        "\n",
        "First, we replicate the same simple fully connected layer of @eq-model0nnlayer two times. One of the neural networks will behave as before: learning to map the input data to the output data. The second one will also look at the same data, but with a different goal: it will learn how much data to let through. Its output is a value between 0 and 1, which is then multiplied to the \"original\" network. When this part of the neural network yields values closer to 0, the mainstream values are effectively shut down. Conversely, when the values are close to 1, the data proceeds as normal.\n",
        "\n",
        "Adjusting @eq-model0nnlayer to include a gate could be as in @eq-gated:\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\xi &= \\phi(\\mathbf{W}_1 x_t + \\mathbf{b}_1) \\\\\n",
        "G &= \\sigma(\\mathbf{W}_G x_t + \\mathbf{b}_G) \\\\\n",
        "y_t &= \\mathbf{W}_2 (\\xi \\odot G) + \\mathbf{b}_2,\n",
        "\\end{align}\n",
        "$$ {#eq-gated}\n",
        "\n",
        "with $\\sigma$ representing the sigmoid function and $\\odot$ the Hadamard multiplication. \n",
        "\n",
        "This type of model where the gate is trained on the same data was introduced by @dauphin2017language. From now on, we refer to @eq-gated as a Gated Linear Unit (GLU).\n",
        "\n",
        "Note that the data that informs the gate does not necessarily need to be the same as the mainstream data.\n"
      ],
      "id": "699fa092"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-nn_fc_gated_summary\n",
        "#| tbl-cap: Summary of gated model\n",
        "\n",
        "#mainstream = createNN_fc(activation=\"relu\")\n",
        "#gate = createNN_fc(activation=\"sigmoid\")\n",
        "\n",
        "dim = 16\n",
        "input = keras.layers.Input(shape=(sum([v for v in maxlags.values()]),), name=\"FlattenedLaggedData\")\n",
        "mainstream = keras.layers.Dense(units=dim, activation=\"relu\", name=\"SummariseInput\")(input)\n",
        "gate = keras.layers.Dense(units=dim, activation=\"sigmoid\", name=\"Gate\")(input)\n",
        "\n",
        "gated_data = keras.layers.Multiply(name=\"GatedData\")([mainstream, gate])\n",
        "output = keras.layers.Dense(units=1, name=\"CalculateOutput\")(gated_data)\n",
        "\n",
        "nn_fc_gated = keras.Model(inputs=input, outputs=output, name=\"GatedModel\")\n",
        "nn_fc_gated.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_fc_gated.summary()"
      ],
      "id": "tbl-nn_fc_gated_summary",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_gatedmodel\n",
        "#| fig-cap: Architecture of gated neural network\n",
        "\n",
        "keras.utils.plot_model(nn_fc_gated, show_layer_names=True, show_layer_activations=True, show_shapes=True)"
      ],
      "id": "fig-arch_gatedmodel",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The model can now be fit with the same input data: it is then used by two different branches (referred to above in the text as \"mainstream\" and \"gate\").\n"
      ],
      "id": "388a43ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fitting gated model\n",
        "\n",
        "history_fc_gated = nn_fc_gated.fit(x=X_train_fc, y=y_train_fc, validation_data=(X_valid_fc, y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fitting-gated-model",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_fc_gated\n",
        "#| fig-cap: 'Losses calculated in a simple, fully-connected neural network with gate.'\n",
        "\n",
        "gated_loss = pd.DataFrame(history_fc_gated.history)\n",
        "gated_loss[\"val_loss (no gate)\"] = history_fc.history[\"val_loss\"]\n",
        "ax = gated_loss.plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_fc_gated",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Long short-term memory {#sec-lstm}\n",
        "\n",
        "A marked improvement in how we can model time series data is the use of recurrent neural networks (RNNs). In essence, these are networks that learn to keep a stateful memory, which is updated as the network \"visits\" each sequential step in time, in turn using both the memory and the new data at that period to predict the output.\n",
        "\n",
        "In contrast to the fully connected layer in @sec-fc, which need to look at different lags to pick up any history-dependent information, RNNs look at the observable variables at each period and learn a latent \"state\" (akin to Kalman filters, for example). The same network then slides up one step in time and uses that information and the previous state to update the state, and so on...\n",
        "\n",
        "One particular type of RNN that has proven to be very successful in practice is the long short-term memory (LSTM) model, due to @hochreiter1997long. It is actually a combination of four different layers, of which three are actually gates. These layers are built in a specific way.\n",
        " Here's how the input vector $x_t$ and the learned LSTM state $h_{t-1}$ are used for the LSTM-forward pass at time step $t$:\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "f_t &= \\sigma(W_f x_t + U_f h_{t-1} + b_f) \\\\\n",
        "i_t &= \\sigma(W_i x_t + U_i h_{t-1} + b_i) \\\\\n",
        "o_t &= \\sigma(W_o x_t + U_o h_{t-1} + b_o) \\\\\n",
        "\\tilde{c}_t &= \\omega(W_c x_t + U_c h_{t-1} + b_c) \\\\\n",
        "c_t &= \\underbrace{f_t \\odot c_{t-1}}_{\\text{Gated past data}} + \\underbrace{i_t \\odot \\tilde{c}_t}_{\\text{How much to learn}} \\\\\n",
        "h_t &= o_t \\odot \\omega(c_t),\n",
        "\\end{align}\n",
        "$$ {#eq-model1lstm}\n",
        "\n",
        "where $\\omega$ is the hyperbolic function.\n",
        "\n",
        "The basic intuition of the LSTM is that some of the individual component layers essentially learn to look at the current data and the past memory and then decide how much new information to let through. Note that, because their activation is a sigmoid, the output of layers $f_t$, $i_t$ and $o_t$ is a number between 0 and 1. This idea is important to bear in mind because it will be used at a much bigger scale by the whole TFT model - and will be one key feature of its interpretability.\n",
        "\n",
        "With LSTM networks, it is easier to incorporate mixed-frequency data in a meaningful way. This is done below by passing data of each frequency through their own LSTM layers, and combining their last outputs.\n"
      ],
      "id": "7e754480"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-lstm_summary\n",
        "#| tbl-cap: Summary of LSTM model\n",
        "\n",
        "dim = 16 # arbitrary dimension\n",
        "\n",
        "freqs = [\"m\", \"d\"] # using here the commonly-used frequency abbreviations\n",
        "\n",
        "inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "LSTMs = []\n",
        "for k, v in inputs.items():\n",
        "    lstm = keras.layers.Masking(mask_value=0.0)(v)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(lstm)\n",
        "    LSTMs.append(lstm)\n",
        "encoded_series = keras.layers.Average(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_lstm = keras.Model(\n",
        "    inputs=inputs, \n",
        "    outputs=out,\n",
        "    name=\"LSTMNetwork\"\n",
        ")\n",
        "nn_lstm.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_lstm.summary()"
      ],
      "id": "tbl-lstm_summary",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_lstm\n",
        "#| fig-cap: Architecture of the network with LSTM layer\n",
        "\n",
        "keras.utils.plot_model(nn_lstm, show_layer_activations=True, show_shapes=True, show_layer_names=True)"
      ],
      "id": "fig-arch_lstm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The reason why the dimensions in the input layer are now `(None, None, 1)`, with one addition `None` compared to before(for example, @fig-arch_fc) is due to the *time dimension*. Whereas before the model didn't know how many samples it would be fed, now also the length of the time window can change because each time step will pass through exactly the same parameters. \n",
        "\n",
        "Note that the input goes through a few steps before reaching the LSTM layer. This is due to a masking layer that effectively helps the model jumps time steps for which there is no data available.\n",
        "\n",
        "To check that the LSTM-based neural network works, we need to feed this neural network a slightly different type of data. LSTM, as other recurrent neural networks, takes in time series data. So, unlike before, we now prepare a time series (or panel data) for each \n",
        "\n",
        "This neural network will then take in the inputted time series data, and encode each frequency's series separately through the different LSTM streams. The final result will no longer have a time dimension; it is then averaged, and this average embeddings of the different time series is used to forecast the variable of interest.\n"
      ],
      "id": "c4fefd78"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: train the lstm\n",
        "X_train_split, y_train_split = create_data(X=X_train, y=y_train, maxlags=maxlags)\n",
        "\n",
        "def adjust_data_lstm(fold=\"fold_0\", chunk=\"train\"):\n",
        "    X_lstm = {}\n",
        "    for d in X_train_split[fold][chunk]:\n",
        "        for key, array in d.items():\n",
        "            if key not in X_lstm:\n",
        "                X_lstm[key] = []  # Initialize an empty list if key is not present\n",
        "            X_lstm[key].append(array)  # Append the array to the list for that key\n",
        "    lstm_X = {k: np.squeeze(np.array(v), axis=1) for k, v in X_lstm.items()}\n",
        "    return lstm_X\n",
        "lstm_X_train = adjust_data_lstm(fold=\"fold_4\", chunk=\"train\")\n",
        "lstm_X_valid = adjust_data_lstm(fold=\"fold_4\", chunk=\"valid\")\n",
        "\n",
        "history_lstm = nn_lstm.fit(x=lstm_X_train, y=np.array(y_train_split[\"fold_4\"][\"train\"]), validation_data=(lstm_X_valid, np.array(y_train_split[\"fold_4\"][\"valid\"])), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "train-the-lstm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_lstm\n",
        "#| fig-cap: Losses calculated in an LSTM\n",
        "#| fig-subcap:\n",
        "#|   - All models so far\n",
        "#|   - LSTM only\n",
        "lstm_loss = pd.DataFrame(history_lstm.history)\n",
        "lstm_loss[\"val_loss (FC with gate)\"] = history_fc_gated.history[\"val_loss\"]\n",
        "lstm_loss[\"val_loss (FC no gate)\"] = history_fc.history[\"val_loss\"]\n",
        "ax = lstm_loss.plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()\n",
        "\n",
        "ax = lstm_loss[[\"loss\", \"val_loss\"]].plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_lstm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Introducing... the gatekeepers {#sec-gates}\n",
        "\n",
        "Introducing gates in a model can bring important advantages. According to @lim2021temporal, GLUs:\n",
        "\n",
        "- \"... reduce the vanishing gradient problem for deep architectures by providing a linear path for gradients while retaining non-linear capabilities\", and\n",
        "- \"... provide flexibility to suppress any parts of the architecture that are not required for a given dataset\".\n",
        "\n",
        "This section formalises the GLU model of @sec-glu as if it were a single layer. This serves as a building block for the Gated Residual Network (GRN), a group of layers that learns to dynamically adjust the complexity of a larger neural network.\n",
        "\n",
        "First, the GLU as a layer is introduced below.\n"
      ],
      "id": "c773993a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class glu\n",
        "# NOTE: to add to codebase and replace here with an import\n",
        "\n",
        "class GatedLinearUnit(keras.Layer):\n",
        "    def __init__(\n",
        "        self,\n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        dropout_rate:float|None=None, # Dropout rate\n",
        "        use_time_distributed:bool=True, # Apply the GLU across all time steps?\n",
        "        activation:str|Callable|None=None, # Activation function\n",
        "        **kwargs\n",
        "    ):\n",
        "        \"Gated Linear Unit dynamically gates input data\"\n",
        "        super().__init__(**kwargs)\n",
        "        self.d_model = d_model\n",
        "        self.dropout_rate = dropout_rate\n",
        "        self.use_time_distributed = use_time_distributed\n",
        "        self.activation = activation\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super().build(input_shape)\n",
        "        self.dropout = keras.layers.Dropout(self.dropout_rate) if self.dropout_rate is not None else None\n",
        "        self.activation_layer = keras.layers.Dense(self.d_model, activation=self.activation)\n",
        "        self.gate_layer = keras.layers.Dense(self.d_model, activation='sigmoid')\n",
        "        self.multiply = keras.layers.Multiply()\n",
        "\n",
        "        if self.use_time_distributed:\n",
        "            self.activation_layer = keras.layers.TimeDistributed(self.activation_layer)\n",
        "            self.gate_layer = keras.layers.TimeDistributed(self.gate_layer)\n",
        "\n",
        "    def call(\n",
        "        self, \n",
        "        inputs, \n",
        "        training=None\n",
        "    ):\n",
        "        \"\"\"List of outputs with shape: [\n",
        "            (batch size, ..., d_model),\n",
        "            (batch size, ..., d_model)\n",
        "        ]\"\"\"\n",
        "        if self.dropout is not None and training:\n",
        "            inputs = self.dropout(inputs)\n",
        "\n",
        "        activation_output = self.activation_layer(inputs)\n",
        "        gate_output = self.gate_layer(inputs)\n",
        "        return self.multiply([activation_output, gate_output]), gate_output\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super().get_config()\n",
        "        config.update({\n",
        "            'd_model': self.d_model,\n",
        "            'dropout_rate': self.dropout_rate,\n",
        "            'use_time_distributed': self.use_time_distributed,\n",
        "            'activation': self.activation\n",
        "        })\n",
        "        return config"
      ],
      "id": "class-glu",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The GLU is simply:\n",
        "\n",
        "$$\n",
        "\\text{GLU}(x) = \\sigma(W_{G} x + b_G) \\odot (W_1 x + b_1),\n",
        "$$ {#eq-glu}\n",
        "\n",
        "with $W_G, W_1 \\in \\mathbb{R}^{|x| \\times \\lambda}$ and $b_G, b_1 \\in \\mathbb{R}^{\\lambda}$.\n"
      ],
      "id": "93048745"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_glu\n",
        "#| tbl-cap: Summary of model with GLU\n",
        "\n",
        "dim = 16\n",
        "\n",
        "keras.backend.clear_session()\n",
        "\n",
        "inputs = keras.layers.Input(shape=(sum([v for v in maxlags.values()]),),name=\"FlattenedLaggedInput\")\n",
        "\n",
        "gated_features, gate = GatedLinearUnit(d_model=dim, activation=\"relu\", use_time_distributed=False, name=\"Gate\")(inputs)\n",
        "\n",
        "output = keras.layers.Dense(units=dim, activation=\"relu\", name=\"SummariseInput\")(gated_features)\n",
        "\n",
        "output = keras.layers.Dense(units=1, name=\"CalculateOutput\")(output)\n",
        "\n",
        "nn_glu = keras.Model(inputs=inputs, outputs=output, name=\"GLUModel\")\n",
        "nn_glu.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_glu.summary()"
      ],
      "id": "tbl-summary_glu",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_glu\n",
        "#| fig-cap: GLU model\n",
        "\n",
        "keras.utils.plot_model(nn_glu, show_layer_activations=True, show_shapes=True, show_layer_names=True)"
      ],
      "id": "fig-arch_glu",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fit glu model\n",
        "\n",
        "history_glu = nn_glu.fit(x=X_train_fc, y=y_train_fc, validation_data=(X_valid_fc, y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fit-glu-model",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_glu\n",
        "#| fig-cap: Losses calculated in a GLU neural network\n",
        "\n",
        "ax = pd.DataFrame(history_glu.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_glu",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "As mentioned above, the GLU itself actually serves as an important component of a slightly larger group of layers, the GRNs. Now is the time to introduce them.\n",
        "\n",
        "GRNs are formally:\n",
        "\n",
        "$$\n",
        "\\text{GRN}(x) = \\text{LayerNorm}(x + \\text{GLU}(W_2 (\\text{ELU}(W_1 x + b1 + W_c c )) + b_2)),\n",
        "$$ {#eq-grn}\n",
        "\n",
        "where $\\text{LayerNorm}$ (@ba2016layer) normalises its inputs, ie subtracts its mean and divides by its standard deviation,[^layernorm] $\\text{ELU}$ is the exponential linear unit function (@clevert2015fast). Unlike ReLUs, ELUs allow for negative values, which pushes unit activations closer to zero at a lower computation complexity, and producing more accurate results.\n",
        "\n",
        "The final component in @eq-grn is $c \\in \\mathbb{R}^{\\lambda}$, or a context vector - more on that below in @sec-timeembed. For the moment, we can use $c=\\mathbf{0}$ the zero vector.\n",
        "\n",
        "[^layernorm]: Normalising a layer helps to avoid the numbers from becoming too large, which is detrimental to gradient transmission and therefore to learning. This is helpful for example when summing up the outputs from intermediary layers.\n",
        "\n",
        "Put simply, the GRN takes in a certain data $x$ and combines it with a non-linear transformation. This non-linear component goes through an GLU, which learns when to gate and when to let through the non-linear transformation of the data.\n",
        "\n",
        "The GRN helps keep information only from relevant input variables and keeps the model as simple as possible by only applying non-linearities when relevant.\n"
      ],
      "id": "e9d703cd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class grn\n",
        "\n",
        "class GatedResidualNetwork(keras.layers.Layer):\n",
        "    def __init__(\n",
        "        self, \n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        output_size=None, \n",
        "        dropout_rate=None, \n",
        "        use_time_distributed=True, \n",
        "        **kwargs\n",
        "    ):\n",
        "        \"Gated residual network\"\n",
        "        super(GatedResidualNetwork, self).__init__(**kwargs)\n",
        "        self.d_model = d_model\n",
        "        self.output_size = output_size if output_size is not None else d_model\n",
        "        self.dropout_rate = dropout_rate\n",
        "        self.use_time_distributed = use_time_distributed\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(GatedResidualNetwork, self).build(input_shape)\n",
        "        self.dense = keras.layers.Dense(self.output_size)\n",
        "        self.hidden_dense = keras.layers.Dense(self.d_model)\n",
        "        self.hidden_dense_post = keras.layers.Dense(self.d_model)\n",
        "        self.hidden_activation = keras.layers.Activation('elu')\n",
        "        self.context_dense = keras.layers.Dense(self.d_model, use_bias=False)\n",
        "        self.gating_layer = GatedLinearUnit(\n",
        "            d_model=self.output_size, \n",
        "            dropout_rate=self.dropout_rate, \n",
        "            use_time_distributed=self.use_time_distributed, \n",
        "            activation=None)\n",
        "        self.add = keras.layers.Add()\n",
        "        self.l_norm = keras.layers.LayerNormalization()\n",
        "\n",
        "        if self.use_time_distributed:\n",
        "            self.dense = keras.layers.TimeDistributed(self.dense)\n",
        "            self.hidden_dense = keras.layers.TimeDistributed(self.hidden_dense)\n",
        "            self.context_dense = keras.layers.TimeDistributed(self.context_dense)\n",
        "            self.hidden_dense_post = keras.layers.TimeDistributed(self.hidden_dense_post)\n",
        "\n",
        "    def call(self, inputs, additional_context=None, training=None):\n",
        "        # Setup skip connection\n",
        "        skip = self.dense(inputs) if self.output_size else inputs\n",
        "        \n",
        "        # 1st step: eta2\n",
        "        hidden = self.hidden_dense(inputs)\n",
        "\n",
        "        # Context handling\n",
        "        if additional_context is not None:\n",
        "            hidden += self.context_dense(additional_context)\n",
        "\n",
        "        hidden = self.hidden_activation(hidden)\n",
        "        hidden = self.hidden_dense_post(hidden)\n",
        "\n",
        "        # 2nd step: eta1 and 3rd step\n",
        "        gating_layer, gate = self.gating_layer(hidden)\n",
        "        \n",
        "        # Final step\n",
        "        GRN = self.add([skip, gating_layer])\n",
        "        GRN = self.l_norm(GRN)\n",
        "\n",
        "        return GRN, gate\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(GatedResidualNetwork, self).get_config()\n",
        "        config.update({\n",
        "            'd_model': self.d_model,\n",
        "            'output_size': self.output_size,\n",
        "            'dropout_rate': self.dropout_rate,\n",
        "            'use_time_distributed': self.use_time_distributed\n",
        "        })\n",
        "        return config"
      ],
      "id": "class-grn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_grn\n",
        "#| tbl-cap: Summary of GRN\n",
        "\n",
        "dim = 16\n",
        "\n",
        "keras.backend.clear_session()\n",
        "\n",
        "inputs = keras.layers.Input(shape=(sum([v for v in maxlags.values()]),),name=\"FlattenedLaggedInput\")\n",
        "\n",
        "# inputs = keras.layers.Dense(units=dim, activation=\"relu\", name=\"SummariseInput\")(inputs)\n",
        "\n",
        "gated_features, gate = GatedResidualNetwork(d_model=262, use_time_distributed=False, name=\"GRN\")(inputs)\n",
        "\n",
        "output = keras.layers.Dense(units=16, activation=\"relu\", name=\"SummariseInput\")(gated_features)\n",
        "\n",
        "output = keras.layers.Dense(units=1, name=\"CalculateOutput\")(output)\n",
        "\n",
        "nn_grn = keras.Model(inputs=inputs, outputs=output, name=\"GRNModel\")\n",
        "nn_grn.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_grn.summary()"
      ],
      "id": "tbl-summary_grn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_grn\n",
        "#| fig-cap: GRN model architecture\n",
        "\n",
        "keras.utils.plot_model(nn_grn, show_shapes=True, show_layer_names=True, show_layer_activations=True)"
      ],
      "id": "fig-arch_grn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fitting GRN model\n",
        "\n",
        "history_grn = nn_grn.fit(x=X_train_fc, y=y_train_fc, validation_data=(X_valid_fc, y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fitting-GRN-model",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_grn\n",
        "#| fig-cap: Losses calculated in a GRN neural network\n",
        "\n",
        "ax = pd.DataFrame(history_grn.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_grn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Time to talk about time {#sec-timeembed}\n",
        "\n",
        "Nowcasting, or forecasting for that matter, involves trying to estimate the values of a variable of interest for a certain date. This trivial fact actually offers an important opportunity to improve estimates: it corresponds to something that is *known* about the future, ie about the variable we want to estimate.\n",
        "\n",
        "But temporal features are not continuous variables as inflation and oil price changes. Because they are categorical, they need to be embedded in a vector space with real data to incorporate continuous variables. This is the goal of this section.\n"
      ],
      "id": "0a2878fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: getting temporal features data\n",
        "\n",
        "timefeat = [\"month_of_quarter\", \"month_of_year\"]\n",
        "\n",
        "y_timefeat_train = {timef:\n",
        "    np.array([\n",
        "        get_timefeat(pd.DataFrame(i.values, index=[i.name], columns=i.index), features=timef)\n",
        "        for i in y_train_split_fc[fold][\"train\"]\n",
        "    ])\n",
        "    for timef in timefeat\n",
        "}\n",
        "y_timefeat_valid = {timef:\n",
        "    np.array([\n",
        "        get_timefeat(pd.DataFrame(i.values, index=[i.name], columns=i.index), features=timef)\n",
        "        for i in y_train_split_fc[fold][\"valid\"]\n",
        "    ])\n",
        "    for timef in timefeat\n",
        "}\n",
        "\n",
        "date_range = pd.date_range(start=\"2024-01-01\", end=\"2024-12-31\", freq=\"D\")\n",
        "time_feats = get_timefeat(pd.DataFrame(index=date_range), features=timefeat)"
      ],
      "id": "getting-temporal-features-data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "When working with categorical data, it is necessary to be explicit about the number of possible different values (eg, there are 7 different days of the week).\n"
      ],
      "id": "b181d25a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: set vocab sizes\n",
        "\n",
        "vocab_sizes = {col: time_feats[col].nunique() for col in time_feats}\n",
        "print(vocab_sizes)"
      ],
      "id": "set-vocab-sizes",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_embed\n",
        "#| tbl-cap: Summary of model with embedding\n",
        "\n",
        "dim = 16\n",
        "\n",
        "keras.backend.clear_session()\n",
        "\n",
        "inputs = {\n",
        "    k: keras.layers.Input(shape=(1,), name=k, dtype='int32')  # Input layer for each feature with shape (1,)\n",
        "    for k in vocab_sizes.keys()\n",
        "}\n",
        "\n",
        "embedded_layers = {\n",
        "    k: keras.layers.Embedding(input_dim=v, output_dim=dim, name=f\"{k}_embedding\")(inputs[k])\n",
        "    for k, v in vocab_sizes.items()\n",
        "}\n",
        "\n",
        "combined = keras.layers.Average()(list(embedded_layers.values()))\n",
        "\n",
        "x = keras.layers.Dense(dim, activation=\"relu\")(combined)\n",
        "output = keras.layers.Dense(1)(x)\n",
        "\n",
        "nn_embed = keras.Model(inputs=list(inputs.values()), outputs=output)\n",
        "nn_embed.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_embed.summary()"
      ],
      "id": "tbl-summary_embed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-label": "Architecture of model with embeddings"
      },
      "source": [
        "#| label: fig-arch_embed\n",
        "\n",
        "keras.utils.plot_model(nn_embed, show_shapes=True, show_layer_names=True, show_layer_activations=True)"
      ],
      "id": "fig-arch_embed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-embed_loss\n",
        "#| fig-cap: Losses of model with embeddings\n",
        "history_embed = nn_embed.fit(x=y_timefeat_train, y=y_train_fc, validation_data=(y_timefeat_valid, y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fig-embed_loss",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "As before, the losses are plotted below.\n"
      ],
      "id": "889d17b7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_embed\n",
        "#| fig-cap: 'Losses calculated in a simple, fully-connected neural network.'\n",
        "\n",
        "ax = pd.DataFrame(history_embed.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_embed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The embeddings themselves can be inspected, as in @fig-embed.\n"
      ],
      "id": "36f5f4d2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-embed\n",
        "#| fig-cap: Embedding values\n",
        "#| fig-subcap:\n",
        "#|   - Month of the year\n",
        "#|   - Quarter of the year\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.imshow(nn_embed.layers[2].get_weights()[0], cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Values')  # Optional: Add colorbar to show scale\n",
        "plt.xlabel('Embedding vector elements')\n",
        "plt.ylabel('Month of the quarter')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.imshow(nn_embed.layers[3].get_weights()[0], cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Values')  # Optional: Add colorbar to show scale\n",
        "plt.xlabel('Embedding vector elements')\n",
        "plt.ylabel('Month of the year')\n",
        "plt.show()"
      ],
      "id": "fig-embed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "To get an intuition how this type of data feeds into a nowcasting model, consider that each nowcasted date has a different combination of month of year and month of quarter. Then the inputs to the model change correspondingly. The time series is plotted below.\n"
      ],
      "id": "b6ffd90d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: ts_embed calculations\n",
        "#| fig-cap: Time series of embeddings\n",
        "\n",
        "y_time_feats = get_timefeat(pd.DataFrame(index=y_train.index), features=timefeat)\n",
        "embed_layers = [nn_embed.get_layer(f\"{k}_embedding\") for k in vocab_sizes.keys()]\n",
        "embed_values = keras.Model(inputs=[e.input for e in embed_layers], outputs=[e.output for e in embed_layers])\n",
        "\n",
        "embed_ts = embed_values.predict(dict(y_time_feats))\n",
        "embed_ts = [\n",
        "    np.squeeze(i, axis=1)\n",
        "    for i in embed_ts\n",
        "]"
      ],
      "id": "ts_embed-calculations",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-embedts\n",
        "#| fig-cap: Embedding values (last 24 months)\n",
        "#| fig-subcap:\n",
        "#|   - Month of quarter\n",
        "#|   - Month of year\n",
        "#|   - Average of month of quarter and year embeddings\n",
        "\n",
        "window_months = 36\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.imshow(embed_ts[0][-window_months:].T, cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Values') \n",
        "plt.xlabel(\"Months\")\n",
        "plt.ylabel(\"Embedding elements\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.imshow(embed_ts[1][-window_months:].T, cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Values') \n",
        "plt.xlabel(\"Months\")\n",
        "plt.ylabel(\"Embedding elements\")\n",
        "plt.show()\n",
        "\n",
        "avg_embed = np.mean(np.stack(embed_ts, axis=0), axis=0)\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.imshow(avg_embed[-window_months:].T, cmap='viridis', aspect='auto')\n",
        "plt.colorbar(label='Values') \n",
        "plt.xlabel(\"Months\")\n",
        "plt.ylabel(\"Embedding elements\")\n",
        "plt.show()"
      ],
      "id": "fig-embedts",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "One way these categorical variables can enrich models with continues variables that were used before is by using the embeddings for a particular instance as additional context, as the $c$ in @eq-grn.\n"
      ],
      "id": "abccb0c2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_grn_context\n",
        "#| tbl-cap: GRN with Embeddings Summary\n",
        "\n",
        "dim = 16\n",
        "\n",
        "keras.backend.clear_session()\n",
        "\n",
        "inputs_cont = keras.layers.Input(shape=(sum([v for v in maxlags.values()]),), name=\"FlattenedLaggedInput\")\n",
        "continuous = keras.layers.Dense(dim, activation=\"relu\")(inputs_cont)\n",
        "\n",
        "inputs_time = {\n",
        "    k: keras.layers.Input(shape=(1,), name=k, dtype='int32')  # Input layer for each feature with shape (1,)\n",
        "    for k in vocab_sizes.keys()\n",
        "}\n",
        "# Step 2: Create embedding layers for each input\n",
        "embedded_layers = {\n",
        "    k: keras.layers.Embedding(input_dim=v, output_dim=dim, name=f\"{k}_embedding\")(inputs_time[k])\n",
        "    for k, v in vocab_sizes.items()\n",
        "}\n",
        "context = keras.layers.Average()(list(embedded_layers.values()))\n",
        "\n",
        "gated_features, gate = GatedResidualNetwork(d_model=dim, use_time_distributed=False, name=\"GRN\")(continuous, additional_context=context)\n",
        "\n",
        "output = keras.layers.Dense(units=16, activation=\"relu\", name=\"SummariseInput\")(gated_features)\n",
        "\n",
        "output = keras.layers.Dense(units=1, name=\"CalculateOutput\")(output)\n",
        "\n",
        "nn_grn_context = keras.Model(inputs=[inputs_cont, inputs_time], outputs=output, name=\"GRNwithContextModel\")\n",
        "nn_grn_context.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_grn_context.summary()"
      ],
      "id": "tbl-summary_grn_context",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_grn_context\n",
        "#| fig-cap: Architecture of the GRN model with context\n",
        "\n",
        "keras.utils.plot_model(nn_grn_context, show_shapes=True, show_layer_activations=True, show_layer_names=True)"
      ],
      "id": "fig-arch_grn_context",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fitting GRN model with context\n",
        "\n",
        "history_grn_context = nn_grn_context.fit(x=[X_train_fc, y_timefeat_train], y=y_train_fc, validation_data=([X_valid_fc, y_timefeat_valid], y_valid_fc), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "fitting-GRN-model-with-context",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_grn_context\n",
        "#| fig-cap: Losses calculated in a GRN neural network with context\n",
        "\n",
        "ax = pd.DataFrame(history_grn_context.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_grn_context",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Encoding continuous variables {#sec-encodcont}\n",
        "\n",
        "The intuition on embeddings built from @sec-timeembed can also serve now to think about embedding, or encoding, continuous variables.\n",
        "\n",
        "In contrast to categorical variables like temporal features, or entity identity (ie, which country, or bank, or stock, etc), the possible values are not defined a priori. So there is no way to create a lookup table that will map a given category, say, the month of \"September\" to a specific vector.\n",
        "\n",
        "However, continuous variables can still be mapped into a vector space defined in $\\mathbb{R}$, in a way that encodes useful information. The simplest way to achieve this is by training parameters of a linear transformation of each data point of variable $j$ in time $t$ into $\\xi_t^{(j)} \\in \\mathbb{R}^{\\lambda}$. \n"
      ],
      "id": "9b6ffb5f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_encodcont\n",
        "#| tbl-cap: Summary of network embedding continuous variable_weights\n",
        "\n",
        "inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "\n",
        "encoded_inputs = {\n",
        "    k: keras.layers.TimeDistributed(\n",
        "        keras.layers.Dense(dim),\n",
        "        name=f\"encoding__{k}\"\n",
        "    )(v)\n",
        "    for k, v in inputs.items()\n",
        "}\n",
        "\n",
        "LSTMs = []\n",
        "for k, v in encoded_inputs.items():\n",
        "    lstm = keras.layers.Masking(mask_value=0.0)(v)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(lstm)\n",
        "    LSTMs.append(lstm)\n",
        "encoded_series = keras.layers.Average(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_encodcont = keras.Model(\n",
        "    inputs=inputs, \n",
        "    outputs=out,\n",
        "    name=\"EncodedContinuousVarsNetwork\"\n",
        ")\n",
        "\n",
        "nn_encodcont.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_encodcont.summary()"
      ],
      "id": "tbl-summary_encodcont",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_encodcont\n",
        "#| fig-cap: Architecture of the network with encoded continuous variables before the LSTM layers\n",
        "\n",
        "keras.utils.plot_model(nn_encodcont, show_layer_activations=True, show_shapes=True, show_layer_names=True)"
      ],
      "id": "fig-arch_encodcont",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Compare this figure with @fig-arch_lstm. Note that while before, each LSTM received as input the original variable, now in @fig-arch_encodcont the inputs to the LSTMs are actually $\\lambda=16$ latent variables for each raw data variable we included.\n",
        "\n",
        "The aim of this operation is to allow the model to learn richer nuance from the data in addition to the data point itself.\n"
      ],
      "id": "92b15d20"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: train network with encoded continuous variables\n",
        "\n",
        "X_train_split, y_train_split = create_data(X=X_train, y=y_train, maxlags=maxlags)\n",
        "\n",
        "def adjust_data_lstm(fold=\"fold_0\", chunk=\"train\"):\n",
        "    X_lstm = {}\n",
        "    for d in X_train_split[fold][chunk]:\n",
        "        for key, array in d.items():\n",
        "            if key not in X_lstm:\n",
        "                X_lstm[key] = []  # Initialize an empty list if key is not present\n",
        "            X_lstm[key].append(array)  # Append the array to the list for that key\n",
        "    lstm_X = {k: np.squeeze(np.array(v), axis=1) for k, v in X_lstm.items()}\n",
        "    return lstm_X\n",
        "lstm_X_train = adjust_data_lstm(fold=\"fold_4\", chunk=\"train\")\n",
        "lstm_X_valid = adjust_data_lstm(fold=\"fold_4\", chunk=\"valid\")\n",
        "\n",
        "history_encodcont = nn_encodcont.fit(x=lstm_X_train, y=np.array(y_train_split[\"fold_4\"][\"train\"]), validation_data=(lstm_X_valid, np.array(y_train_split[\"fold_4\"][\"valid\"])), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "train-network-with-encoded-continuous-variables",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that the network is trained, we can inspect how these embeddings of continuous variables work. Compare @fig-encodcontts below with @fig-embedts-3.\n"
      ],
      "id": "c176884f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-encodcontts\n",
        "#| fig-cap: Time series of continuous embedding\n",
        "#| fig-subcap:\n",
        "#|   - Monthly data\n",
        "#|   - Daily data\n",
        "\n",
        "encodcont_ts_m = nn_encodcont.get_layer(\"encoding__m\")(np.expand_dims(lstm_X_train[\"m\"][:,-1,0], axis=(0, -1)))\n",
        "plt.plot(np.squeeze(encodcont_ts_m))\n",
        "plt.show()\n",
        "\n",
        "encodcont_ts_m = nn_encodcont.get_layer(\"encoding__d\")(np.expand_dims(lstm_X_train[\"d\"][:,-1,0], axis=(0, -1)))\n",
        "plt.plot(np.squeeze(encodcont_ts_m))\n",
        "plt.show()"
      ],
      "id": "fig-encodcontts",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Variable selection networks {#sec-varsel}\n",
        "\n",
        "Now is a good time to put these elements together in a more directly useful way. In particular, we can consider how it can help select the most informative variables amongst a set of input series (eg, lagged inflation and oil prices in the current toy example.)\n",
        "\n",
        "The Variable Selection Networks (VSN) are components of the TFT that are built with GRNs, taking in each covariate and outputting a weighted average of the covariates, where the weights are learned by the model.\n",
        "\n",
        "VSNs can be used to select amongst continuous, categorical or even static variables. The code below focuses on the continuous variables of the current toy model, $\\pi_m$ and $o_d$.\n"
      ],
      "id": "a7007522"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class svs\n",
        "\n",
        "class StaticVariableSelection(keras.Layer):\n",
        "    def __init__(\n",
        "        self, \n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        dropout_rate:float=0., \n",
        "        **kwargs\n",
        "    ):\n",
        "        \"Static variable selection network\"\n",
        "        super(StaticVariableSelection, self).__init__(**kwargs)\n",
        "        self.d_model = d_model\n",
        "        self.dropout_rate = dropout_rate\n",
        "\n",
        "        # Define GRNs for the transformed embeddings\n",
        "        self.grns_transformed_embeddings = []  # This will be a list of GRN layers\n",
        "\n",
        "        self.flat = keras.layers.Flatten()\n",
        "        self.softmax = keras.layers.Activation('softmax')\n",
        "        self.mult = keras.layers.Multiply()\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(StaticVariableSelection, self).build(input_shape)\n",
        "        \n",
        "        num_static = input_shape[2]\n",
        "\n",
        "        # Define the GRN for the sparse weights\n",
        "        self.grn_sparse_weights = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            output_size=num_static,\n",
        "            use_time_distributed=False\n",
        "        )\n",
        "\n",
        "        for i in range(num_static):\n",
        "            # Create a GRN for each static variable\n",
        "            self.grns_transformed_embeddings.append(\n",
        "                GatedResidualNetwork(\n",
        "                    self.d_model, \n",
        "                    use_time_distributed=False\n",
        "                    )\n",
        "            )\n",
        "\n",
        "    def call(self, inputs, training=None):\n",
        "        _, _, num_static, _ = inputs.shape # batch size / one time step (since it's static) / num static variables / d_model\n",
        "\n",
        "        flattened = self.flat(inputs)\n",
        "\n",
        "        # Compute sparse weights\n",
        "        grn_outputs, _ = self.grn_sparse_weights(flattened, training=training)\n",
        "        sparse_weights = self.softmax(grn_outputs)\n",
        "        sparse_weights = keras.ops.expand_dims(sparse_weights, axis=-1)\n",
        "\n",
        "        # Compute transformed embeddings\n",
        "        transformed_embeddings = []\n",
        "        for i in range(num_static):\n",
        "            embed, _ = self.grns_transformed_embeddings[i](inputs[:, 0, i:i+1, :], training=training)\n",
        "            transformed_embeddings.append(embed)\n",
        "        transformed_embedding = keras.ops.concatenate(transformed_embeddings, axis=1)\n",
        "\n",
        "        # Combine with sparse weights\n",
        "        combined = self.mult([sparse_weights, transformed_embedding])\n",
        "        static_vec = keras.ops.sum(combined, axis=1)\n",
        "\n",
        "        return static_vec, sparse_weights\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(StaticVariableSelectionLayer, self).get_config()\n",
        "        config.update({\n",
        "            'd_model': self.d_model,\n",
        "            'dropout_rate': self.dropout_rate\n",
        "        })\n",
        "        return config"
      ],
      "id": "class-svs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Temporal variable selection networks work by considering all variables (of a given frequency) at the same time, together with an (optional) static context embedding, to calculate weights that are multiplied by a processed version of each variable. Breaking this up in steps: \n",
        "\n",
        "- consider $\\xi_t^{(j)} \\in \\mathbb{R}^{\\lambda}$ to be the encoding (as in @tbl-summary_embed or @tbl-summary_encodcont) of the $j$th variable in time $t$, and collect the values at time $t$ for *all* $J$ input variables for that frequency in the flattened vector $\\Xi_t$\n",
        "\n",
        "- collect the static variable encoders for use as context, $c_s \\in \\mathbb{R}^{\\lambda}$,\n",
        "\n",
        "- then, the selection weights for that frequency are the result of $\\nu_t = \\text{Softmax}(\\text{GRN}(\\Xi_t, c_s))  \\in \\mathbb{R}^{|J|}$$,\n",
        "\n",
        "- these weights, which sum to one due to the softmax operation, are used on a version of the encoded variables that has itself been further encoded by a variable-specific GRN: $\\tilde{\\xi}_t = \\sum_{j=1}^{J}\\nu_t^{(j)} \\text{GRN}_j (\\xi_t^{(j)}) \\in \\mathbb{R}^{\\lambda}$.\n",
        "\n",
        "In short, the temporal variable selection network takes in data with the shape (batch size / number of time steps / number of variables / embedding dimension $\\lambda$) and output a tensor with the shape (batch size / number of time steps / embedding dimension $\\lambda$).\n"
      ],
      "id": "f1d8657b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class tvs\n",
        "\n",
        "class TemporalVariableSelection(keras.Layer):\n",
        "    def __init__(\n",
        "        self, \n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        dropout_rate:float=0., \n",
        "        **kwargs\n",
        "    ):\n",
        "        \"Temporal variable selection\"\n",
        "        super(TemporalVariableSelection, self).__init__(**kwargs)\n",
        "        self.d_model = d_model\n",
        "        self.dropout_rate = dropout_rate\n",
        "\n",
        "        self.mult = keras.layers.Multiply()\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(TemporalVariableSelection, self).build(input_shape)\n",
        "        self.time_steps, self.num_input_vars, self.d_model = input_shape[1:]\n",
        "\n",
        "        self.var_sel_weights = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            output_size=self.num_input_vars,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=True,\n",
        "        )\n",
        "        self.softmax = keras.layers.Activation('softmax')\n",
        "    \n",
        "        # Create a GRN for each temporal variable\n",
        "        self.grns_transformed_embeddings = [\n",
        "            GatedResidualNetwork(\n",
        "                d_model=self.d_model,\n",
        "                dropout_rate=self.dropout_rate,\n",
        "                use_time_distributed=True\n",
        "            )\n",
        "            for _ in range(self.num_input_vars)\n",
        "        ]\n",
        "\n",
        "    def call(\n",
        "        self, \n",
        "        inputs, # List of temporal embeddings, static context\n",
        "        context=None, # Used for static_context in the TFT\n",
        "        training=None\n",
        "    ):\n",
        "        # shape of inputs (temporal_embeddings): (batch size / num time steps / num variables / embedding dimension, ie dim_model)\n",
        "\n",
        "        flattened_embed = keras.ops.reshape( # \\Xi_t\n",
        "            inputs,\n",
        "            (-1, self.time_steps, self.num_input_vars * self.d_model)\n",
        "        )\n",
        "        parallel_variables = keras.ops.split(\n",
        "            inputs, \n",
        "            indices_or_sections=self.num_input_vars,\n",
        "            axis=2\n",
        "        ) # tensor is shaped this way so that a GRN can be applied to each variable of each batch\n",
        "        c_s = keras.ops.expand_dims(context, axis=1) if context else None\n",
        "\n",
        "        # variable weights\n",
        "        grn_outputs, _ = self.var_sel_weights(flattened_embed, c_s, training=training)\n",
        "        variable_weights = self.softmax(grn_outputs)\n",
        "        variable_weights = keras.ops.expand_dims(variable_weights, axis=2)\n",
        "\n",
        "        transformed_embeddings, _ = [\n",
        "            self.grns_transformed_embeddings[i](parallel_variables[i], training=training)\n",
        "            for i in range(self.num_input_vars)\n",
        "        ]\n",
        "        transformed_embeddings = keras.ops.stack(transformed_embeddings, axis=2)\n",
        "        combined = keras.layers.Multiply()([variable_weights, transformed_embeddings])\n",
        "        temporal_vec = keras.sum(combined, axis=2)\n",
        "        \n",
        "        self.variable_weights = variable_weights\n",
        "        return temporal_vec\n",
        "\n",
        "    def get_selection_weights(self):\n",
        "        return self.variable_weights"
      ],
      "id": "class-tvs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_vsn\n",
        "#| tbl-cap: Summary of VSN (work in progress)\n",
        "\n",
        "dim = 16 # arbitrary dimension\n",
        "\n",
        "keras.backend.clear_session()\n",
        "\n",
        "# <continuous variables>\n",
        "freqs = [\"m\", \"d\"]\n",
        "cont_inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "encoded_cont_inputs = {\n",
        "    k: keras.layers.TimeDistributed(\n",
        "        keras.layers.Dense(dim),\n",
        "        name=f\"encoding__freq_{k}\"\n",
        "    )(v)\n",
        "    for k, v in cont_inputs.items()\n",
        "}\n",
        "# expand dims to add a dimension for the number of variables (in this case, one)\n",
        "encoded_cont_inputs = {k: keras.ops.expand_dims(v, axis=2) for k, v in encoded_cont_inputs.items()}\n",
        "# </continuous variables>\n",
        "\n",
        "# <categorical variables>\n",
        "cat_inputs = {\n",
        "    k: keras.layers.Input(shape=(None,1), name=k, dtype='int32')  # Input layer for each feature with shape (None, 1) to include a time dimension\n",
        "    for k in vocab_sizes.keys()\n",
        "}\n",
        "\n",
        "encoded_cat_inputs = {\n",
        "    k: keras.layers.Embedding(input_dim=v, output_dim=dim, name=f\"{k}_embedding\")(cat_inputs[k])\n",
        "    for k, v in vocab_sizes.items()\n",
        "}\n",
        "# </categorical variables>\n",
        "\n",
        "# next, join up the continuous and categorical historical variables\n",
        "#encoded_inputs = encoded_cont_inputs | encoded_cat_inputs\n",
        "encoded_inputs = {k: None for k in encoded_cont_inputs.keys()}\n",
        "for k in encoded_cont_inputs.keys():\n",
        "    if k == y_freq:\n",
        "        encoded_inputs[k] = keras.ops.concatenate([encoded_cont_inputs[k]] + list(encoded_cat_inputs.values()), axis=2)\n",
        "    else:\n",
        "        encoded_inputs[k] = encoded_cont_inputs[k]\n",
        "\n",
        "### <VSN>\n",
        "flattened = {\n",
        "    k: keras.layers.Reshape(target_shape=(-1, v.shape[-1] * v.shape[-2]), name=f\"reshape__freq_{k}\")(v) # \\Xi_t\n",
        "    for k, v in encoded_inputs.items()\n",
        "}\n",
        "parallel_variables = {\n",
        "    k: keras.ops.split(\n",
        "            v, \n",
        "            indices_or_sections=v.shape[2],\n",
        "            axis=2\n",
        "        )\n",
        "    for k, v in encoded_inputs.items()\n",
        "} # each value is a list, with each item of the list corresponding to one variable\n",
        "var_weights = {\n",
        "    k: keras.layers.Activation('softmax')(\n",
        "        GatedResidualNetwork(\n",
        "            d_model=dim,\n",
        "            output_size=3, # number of input variables in each frequency\n",
        "            use_time_distributed=True,\n",
        "            name=f\"variable_selection__freq_{k}\"\n",
        "        )(v)[0]\n",
        "    )\n",
        "    for k, v in flattened.items()\n",
        "}\n",
        "varspecific_grn = {\n",
        "    k: keras.ops.concatenate([\n",
        "        GatedResidualNetwork(\n",
        "            d_model=dim,\n",
        "            use_time_distributed=True,\n",
        "            name=f\"variable_specific__freq_{k}__var_{i}\"\n",
        "        )(v[i])[0]\n",
        "        for i in range(len(v)) # number of input variables in each frequency\n",
        "    ], axis=2) # along the num_input_vars dimension, resulting in batch size / num time steps / num input vars / embedding dim (lambda)\n",
        "    for k, v in parallel_variables.items()\n",
        "}\n",
        "combined_features = {}\n",
        "for f in freqs:\n",
        "    broadcasted_weights = keras.ops.tile(keras.ops.expand_dims(var_weights[f], axis=-1), (1, 1, 1, dim))\n",
        "    combined_features[f] = keras.ops.sum(\n",
        "        keras.layers.Multiply(name=f\"weighting__freq_{f}\")([broadcasted_weights, varspecific_grn[f]]),\n",
        "        axis=2\n",
        "    )\n",
        "\n",
        "# </VSN>\n",
        "\n",
        "LSTMs = []\n",
        "for k, v in combined_features.items():\n",
        "    lstm = keras.layers.Masking(mask_value=0.0)(v)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(lstm)\n",
        "    LSTMs.append(lstm)\n",
        "\n",
        "encoded_series = keras.layers.Average(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\", name=\"FinalFeatureTransformation\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_vsn = keras.Model(\n",
        "    inputs=cont_inputs | cat_inputs, \n",
        "    outputs=out,\n",
        "    name=\"VSN\"\n",
        ")\n",
        "nn_vsn.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_vsn.summary()"
      ],
      "id": "tbl-summary_vsn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_vsn\n",
        "#| fig-cap: Architecture of model with variable selection network\n",
        "keras.utils.plot_model(nn_vsn, show_shapes=True, show_layer_activations=True, show_layer_names=True)"
      ],
      "id": "fig-arch_vsn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: train the model with temporal variable selection\n",
        "\n",
        "X_train_split, y_train_split, X_dates = create_data(X=X_train, y=y_train, maxlags=maxlags, return_dates=True)\n",
        "\n",
        "y_freq = \"m\" # only do the date features for the same frequency as the dependent variable\n",
        "\n",
        "date_feats = {fold: {chunk: [] for chunk in X_dates[fold].keys()} for fold in X_dates.keys()}\n",
        "for fold in X_dates.keys():\n",
        "    for chunk in X_dates[fold].keys():\n",
        "        dates_fold = [i[y_freq] for i in X_dates[fold][chunk]]\n",
        "        for i in dates_fold:\n",
        "            #<works but not what I need>\n",
        "            # to_pad = get_timefeat(pd.DataFrame(index=i), freq=y_freq, features=timefeat).values\n",
        "            # padded = keras.utils.pad_sequences([to_pad], maxlen=maxlags[y_freq], dtype=np.int32)\n",
        "            # date_feats[fold][chunk].append(padded)\n",
        "            #</works but not what I need>\n",
        "            to_pad = get_timefeat(pd.DataFrame(index=i), freq=y_freq, features=timefeat).to_dict(orient=\"list\")\n",
        "            padded = {k: keras.utils.pad_sequences([v], maxlen=maxlags[y_freq], dtype=np.int32) for k, v in to_pad.items()}\n",
        "            date_feats[fold][chunk].append(padded)\n",
        "\n",
        "def adjust_data_vsn(fold=\"fold_0\", chunk=\"train\"):\n",
        "    X_vsn = {}\n",
        "    merged_data = [{**d1, **d2} for d1, d2 in zip(X_train_split[fold][chunk], date_feats[fold][chunk])]\n",
        "    for d in merged_data:\n",
        "        for key, array in d.items():\n",
        "            if key not in X_vsn:\n",
        "                X_vsn[key] = []  # Initialize an empty list if key is not present\n",
        "            X_vsn[key].append(array)  # Append the array to the list for that key\n",
        "    vsn_X = {k: np.squeeze(np.array(v), axis=1) for k, v in X_vsn.items()}\n",
        "    return vsn_X\n",
        "vsn_X_train = adjust_data_vsn(fold=\"fold_4\", chunk=\"train\")\n",
        "vsn_X_valid = adjust_data_vsn(fold=\"fold_4\", chunk=\"valid\")\n",
        "\n",
        "\n",
        "#cat_input_vars = np.stack([np.squeeze(i) for i in date_feats[\"fold_4\"][\"train\"]])\n",
        "#<VSN date padding> -- only to be done in the same frequency as the dependent variable\n",
        "# try:\n",
        "#     if return_dates:\n",
        "#         dates_X[f] = X[f][:ysample_date][:-1].index\n",
        "#     to_pad = X[f][:ysample_date][:-1].values\n",
        "# except KeyError:\n",
        "#     to_pad = np.zeros((1,1))\n",
        "# padded_x[f] = keras.utils.pad_sequences([to_pad], maxlen=maxlags[f], dtype=np.float32)\n",
        "\n",
        "# x_shape = (1, maxlags[f], n_feat[f]) if timedim else (1, maxlags[f] * n_feat[f])\n",
        "\n",
        "# padded_x[f] = padded_x[f].reshape(x_shape)\n",
        "#</VSN date padding>\n",
        "\n",
        "\n",
        "# y_timefeat_train = {timef:\n",
        "#     np.array([\n",
        "#         get_timefeat(pd.DataFrame(i.values, index=[i.name], columns=i.index), features=timef)\n",
        "#         for i in y_train_split_fc[fold][\"train\"]\n",
        "#     ])\n",
        "#     for timef in timefeat\n",
        "# }\n",
        "# y_timefeat_valid = {timef:\n",
        "#     np.array([\n",
        "#         get_timefeat(pd.DataFrame(i.values, index=[i.name], columns=i.index), features=timef)\n",
        "#         for i in y_train_split_fc[fold][\"valid\"]\n",
        "#     ])\n",
        "#     for timef in timefeat\n",
        "# }\n",
        "\n",
        "history_vsn = nn_vsn.fit(x=vsn_X_train, y=np.array(y_train_split[\"fold_4\"][\"train\"]), validation_data=(vsn_X_valid, np.array(y_train_split[\"fold_4\"][\"valid\"])), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "train-the-model-with-temporal-variable-selection",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_vsn\n",
        "#| fig-cap: Losses of the model with variable selection\n",
        "\n",
        "ax = pd.DataFrame(history_vsn.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_vsn",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Now is a(nother) good time to pay attention {#sec-transf}\n",
        "\n",
        "The transformer architecture (@vaswani2023attentionneed) is based on an altogether different way to look at time series compared to recurrent neural networks as the LSTMs above. Its basic idea is to look at the whole sequence at the same time instead of sequentially. This allows the network to learn relevant connections between data that might be far off in time.\n",
        "\n",
        "Starting with just one frequency for clarity, consider we input time windows of size $N = k + \\tau_{\\text{max}}$, for $k$ the maximum number of lags and $\\tau_{\\text{max}}$ the number of forecasted steps. Each of these time steps is associated with a value vector, $v \\in \\mathbb{R}^{\\lambda_{\\text{value}}}$; the time series of these values is $\\mathbf{V} \\in \\mathbb{R}^{N \\times \\lambda_{\\text{value}}}$. The self-attention mechanism will scale the $\\mathbf{V}$ to reflect the similarity between two other vectors also associated with each time steps.\n",
        "\n",
        "These vectors are their keys and queries, respectively $\\mathbf{K}, \\mathbf{Q} \\in \\mathbb{R}^{\\lambda_{\\text{attention}}}$. \"Attention\" refers to how their similarity is calculated. Essentially, key vectors that are more similar to query vectors will generate larger numbers of \"attention\"; similarly, if they are orthogonal, this will result in a low or null attention between a pair of time steps. We follow common practice and calculate the attention weights using the dot-product between the key and query vectors, normalised by softmax to sum to one and span only the positive space:\n",
        "\n",
        "$A(\\mathbf{Q}, \\mathbf{K}) = \\text{Softmax}(\\mathbf{Q}\\mathbf{K}'/\\sqrt{\\lambda_{\\text{attention}}})$.\n"
      ],
      "id": "3a740895"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class ScaledDotProductAttention\n",
        "\n",
        "class ScaledDotProductAttention(keras.Layer):\n",
        "    def __init__(\n",
        "        self,\n",
        "        dropout_rate:float=0.0, # Will be ignored if `training=False`\n",
        "        **kwargs\n",
        "    ):\n",
        "        super(ScaledDotProductAttention, self).__init__(**kwargs)\n",
        "        self.dropout_rate = dropout_rate\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(ScaledDotProductAttention, self).build(input_shape)\n",
        "        self.dropout = keras.layers.Dropout(rate=self.dropout_rate)\n",
        "        self.activation = keras.layers.Activation('softmax')\n",
        "        self.dot_22 = keras.layers.Dot(axes=(2, 2)) # both inputs need to have the same size in their axis=2 dimensions, in this case, d_model for both\n",
        "        self.dot_21 = keras.layers.Dot(axes=(2, 1)) # the size of the first input's axis=2 dimension needs to match the size of the second input's axis=1 dimension\n",
        "        self.lambda_layer = keras.layers.Lambda(lambda x: (-1e9) * (1. - keras.ops.cast(x, 'float32')))\n",
        "        self.add = keras.layers.Add()\n",
        "\n",
        "    def call(\n",
        "        self,\n",
        "        q, # Queries, tensor of shape (?, time, D_model)\n",
        "        k, # Keys, tensor of shape (?, time, D_model)\n",
        "        v, # Values, tensor of shape (?, time, D_model)\n",
        "        mask, # Masking if required (sets Softmax to very large value), tensor of shape (?, time, time)\n",
        "        training=None, # Whether the layer is being trained or used in inference\n",
        "    ):\n",
        "        # returns Tuple (layer outputs, attention weights)\n",
        "        scale = keras.ops.sqrt(keras.ops.cast(keras.ops.shape(k)[-1], dtype='float32'))\n",
        "        attention = self.dot_22([q, k]) / scale\n",
        "        #attention = keras.ops.einsum(\"bij,bjk->bik\", q, keras.ops.transpose(k, axes=(0, 2, 1))) / scale\n",
        "        if mask is not None:\n",
        "            mmask = self.lambda_layer(mask)\n",
        "            attention = self.add([attention, mmask])\n",
        "        attention = self.activation(attention)\n",
        "        if training:\n",
        "            attention = self.dropout(attention)\n",
        "        output = self.dot_21([attention, v])\n",
        "        #output = keras.ops.einsum(\"btt,btd->bt\", attention, v)\n",
        "        return output, attention"
      ],
      "id": "class-ScaledDotProductAttention",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_sdpa\n",
        "#| tbl-cap: Summary of network with attention\n",
        "\n",
        "dim = 16 # arbitrary dimension\n",
        "\n",
        "freqs = [\"m\", \"d\"]\n",
        "\n",
        "inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "\n",
        "encoded_inputs = {\n",
        "    k: keras.layers.TimeDistributed(\n",
        "        keras.layers.Dense(dim),\n",
        "        name=f\"encoding__{k}\"\n",
        "    )(v)\n",
        "    for k, v in inputs.items()\n",
        "}\n",
        "\n",
        "Attns = []\n",
        "LSTMs = []\n",
        "for k, v in encoded_inputs.items():\n",
        "    attn, attn_weights = ScaledDotProductAttention(name=f\"Attention__freq_{k}\")(q=v, k=v, v=v, mask=None)\n",
        "    Attns.append(attn)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(attn)\n",
        "    LSTMs.append(lstm)\n",
        "\n",
        "encoded_series = keras.layers.Concatenate(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_sdpa = keras.Model(\n",
        "    inputs=inputs, \n",
        "    outputs=out,\n",
        "    name=\"Attention\"\n",
        ")\n",
        "nn_sdpa.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_sdpa.summary()"
      ],
      "id": "tbl-summary_sdpa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_sdpa\n",
        "#| fig-cap: Architecture of the multi-frequency attention Model\n",
        "\n",
        "keras.utils.plot_model(nn_sdpa, show_shapes=True, show_layer_names=True, show_layer_activations=True)"
      ],
      "id": "fig-arch_sdpa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note that in this simple model, the way the different frequencies are combined in @fig-arch_sdpa is by passing the result of the respective self-attention layers (each with their own size along the time dimension due to different frequencies) through their own LSTM layer returning one value. This value is then weighted by a dense network, producing the output.\n"
      ],
      "id": "d649afa4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: train the lstm with attention\n",
        "X_train_split, y_train_split = create_data(X=X_train, y=y_train, maxlags=maxlags)\n",
        "\n",
        "def adjust_data_lstm(fold=\"fold_0\", chunk=\"train\"):\n",
        "    X_lstm = {}\n",
        "    for d in X_train_split[fold][chunk]:\n",
        "        for key, array in d.items():\n",
        "            if key not in X_lstm:\n",
        "                X_lstm[key] = []  # Initialize an empty list if key is not present\n",
        "            X_lstm[key].append(array)  # Append the array to the list for that key\n",
        "    lstm_X = {k: np.squeeze(np.array(v), axis=1) for k, v in X_lstm.items()}\n",
        "    return lstm_X\n",
        "lstm_X_train = adjust_data_lstm(fold=\"fold_4\", chunk=\"train\")\n",
        "lstm_X_valid = adjust_data_lstm(fold=\"fold_4\", chunk=\"valid\")\n",
        "\n",
        "history_sdpa = nn_sdpa.fit(x=lstm_X_train, y=np.array(y_train_split[\"fold_4\"][\"train\"]), validation_data=(lstm_X_valid, np.array(y_train_split[\"fold_4\"][\"valid\"])), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "train-the-lstm-with-attention",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_sdpa\n",
        "#| fig-cap: Losses of the model with attention\n",
        "\n",
        "ax = pd.DataFrame(history_sdpa.history).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_sdpa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Taking this concept of an attention layer further is the interpretable multi-head attention layer. This is just a combination of different scaled dot-product attention layers with the following actions:\n",
        "\n",
        "- linear transformation of the query, keys and values before being passed to each attention layer,\n",
        "\n",
        "- concatenation and a linear combination of the results of the layer.\n",
        "\n",
        "In effect, this allows the attention layers to attend to different aspects of the time series. For example, one attention head might focus on seasonality issues, while another on non-linearities and jumps in volatility.\n",
        "\n",
        "Note that there is no way to know in advance what aspects each head will be focusing on. However, this can be inspected (and subjectively interpreted) ex post.\n"
      ],
      "id": "3468ea41"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class interpretablemultiheadattention\n",
        "\n",
        "class InterpretableMultiHeadAttention(keras.Layer):\n",
        "    def __init__(\n",
        "        self,\n",
        "        n_head:int=4,\n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        dropout_rate:float=0.0, # Will be ignored if `training=False`\n",
        "        **kwargs\n",
        "    ):\n",
        "        super(InterpretableMultiHeadAttention, self).__init__(**kwargs)\n",
        "        self.n_head = n_head\n",
        "        self.d_model = d_model\n",
        "        self.d_qk = self.d_v = d_model // n_head # the original model divides by number of heads\n",
        "        self.dropout_rate = dropout_rate\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(InterpretableMultiHeadAttention, self).build(input_shape)\n",
        "        \n",
        "        # using the same value layer facilitates interpretability\n",
        "        vs_layer = keras.layers.Dense(self.d_v, use_bias=False, name=\"shared_attn_value\")\n",
        "\n",
        "        # creates list of queries, keys and values across heads\n",
        "        self.qs_layers = [keras.layers.Dense(self.d_qk) for _ in range(self.n_head)]\n",
        "        self.ks_layers = [keras.layers.Dense(self.d_qk) for _ in range(self.n_head)]\n",
        "        self.vs_layers = [vs_layer for _ in range(self.n_head)]\n",
        "\n",
        "        self.attention = ScaledDotProductAttention(dropout_rate=self.dropout_rate)\n",
        "        self.w_o = keras.layers.Dense(self.d_model, use_bias=False, name=\"W_v\") # W_v in Eqs. (14)-(16), output weight matrix to project internal state to the original TFT\n",
        "        self.dropout = keras.layers.Dropout(self.dropout_rate)\n",
        "\n",
        "    def call(\n",
        "        self,\n",
        "        q, # Queries, tensor of shape (?, time, d_model)\n",
        "        k, # Keys, tensor of shape (?, time, d_model)\n",
        "        v, # Values, tensor of shape (?, time, d_model)\n",
        "        mask=None, # Masking if required (sets Softmax to very large value), tensor of shape (?, time, time)\n",
        "        training=None\n",
        "    ):\n",
        "        heads = []\n",
        "        attns = []\n",
        "        for i in range(self.n_head):\n",
        "            qs = self.qs_layers[i](q)\n",
        "            ks = self.ks_layers[i](q)\n",
        "            vs = self.vs_layers[i](v)\n",
        "           \n",
        "            head, attn = self.attention(qs, ks, vs, mask, training=training)\n",
        "            if training:\n",
        "                head = self.dropout(head)\n",
        "            heads.append(head)\n",
        "            attns.append(attn)\n",
        "        head = keras.ops.stack(heads) if self.n_head > 1 else heads[0]\n",
        "        attn = keras.ops.stack(attns)\n",
        "\n",
        "        outputs = keras.ops.mean(head, axis=0) if self.n_head > 1 else head # H_tilde\n",
        "        outputs = self.w_o(outputs)\n",
        "        if training:\n",
        "            outputs = self.dropout(outputs)\n",
        "\n",
        "        return outputs, attn"
      ],
      "id": "class-interpretablemultiheadattention",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-imha\n",
        "#| tbl-cap: Summary of network with interpretable multi-head attention\n",
        "\n",
        "dim = 16 # arbitrary dimension\n",
        "\n",
        "freqs = [\"m\", \"d\"]\n",
        "\n",
        "inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "\n",
        "encoded_inputs = {\n",
        "    k: keras.layers.TimeDistributed(\n",
        "        keras.layers.Dense(dim),\n",
        "        name=f\"encoding__{k}\"\n",
        "    )(v)\n",
        "    for k, v in inputs.items()\n",
        "}\n",
        "\n",
        "Attns = []\n",
        "LSTMs = []\n",
        "for k, v in encoded_inputs.items():\n",
        "    attn, attn_weights = InterpretableMultiHeadAttention(name=f\"IMHA__freq_{k}\")(q=v, k=v, v=v, mask=None)\n",
        "    Attns.append(attn)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(attn)\n",
        "    LSTMs.append(lstm)\n",
        "\n",
        "encoded_series = keras.layers.Concatenate(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_imha = keras.Model(\n",
        "    inputs=inputs, \n",
        "    outputs=out,\n",
        "    name=\"Attention\"\n",
        ")\n",
        "nn_imha.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_imha.summary()"
      ],
      "id": "tbl-imha",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-arch_imha\n",
        "#| fig-cap: Architecture of the model with multi-frequency interpretable multi-head attention\n",
        "\n",
        "keras.utils.plot_model(nn_imha, show_shapes=True, show_layer_names=True, show_layer_activations=True)"
      ],
      "id": "fig-arch_imha",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: train the lstm with multi-head attention\n",
        "X_train_split, y_train_split = create_data(X=X_train, y=y_train, maxlags=maxlags)\n",
        "\n",
        "def adjust_data_lstm(fold=\"fold_0\", chunk=\"train\"):\n",
        "    X_lstm = {}\n",
        "    for d in X_train_split[fold][chunk]:\n",
        "        for key, array in d.items():\n",
        "            if key not in X_lstm:\n",
        "                X_lstm[key] = []  # Initialize an empty list if key is not present\n",
        "            X_lstm[key].append(array)  # Append the array to the list for that key\n",
        "    lstm_X = {k: np.squeeze(np.array(v), axis=1) for k, v in X_lstm.items()}\n",
        "    return lstm_X\n",
        "lstm_X_train = adjust_data_lstm(fold=\"fold_4\", chunk=\"train\")\n",
        "lstm_X_valid = adjust_data_lstm(fold=\"fold_4\", chunk=\"valid\")\n",
        "\n",
        "history_imha = nn_imha.fit(x=lstm_X_train, y=np.array(y_train_split[\"fold_4\"][\"train\"]), validation_data=(lstm_X_valid, np.array(y_train_split[\"fold_4\"][\"valid\"])), epochs=20, batch_size=10, shuffle=True)"
      ],
      "id": "train-the-lstm-with-multi-head-attention",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-history_imha\n",
        "#| fig-cap: Losses of the model with interpretable multi-head attention\n",
        "\n",
        "imha_loss = history_imha.history\n",
        "imha_loss[\"val_loss_SDPA\"] = history_sdpa.history[\"val_loss\"]\n",
        "\n",
        "ax = pd.DataFrame(imha_loss).plot()\n",
        "ax.set_xlabel(\"Epochs\")\n",
        "ax.set_ylabel(\"Mean squared error\")\n",
        "plt.show()"
      ],
      "id": "fig-history_imha",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Complete architecture {#sec-tftmf}\n",
        "\n",
        "This section uses the following notation, using as much as possible the original TFT paper notation.\n",
        "\n",
        "- Panel data\n",
        "  - individuals (countries, banks, households, etc) are indexed by $i \\in (1, \\dots, I)$.\n",
        "  - time steps are indexed by $t \\in (t0, t1, \\dots, T)$\n",
        "- Input variables\n",
        "  - static variables: $s_i \\in \\mathbb{R}^{m_s}$, for $m_s$ the number of static variables for each individual $i$\n",
        "  - time-dependent variables: $\\chi_{i,t} \\in \\mathbb{R}^{m_{\\chi}}$, for $m_{\\chi}$ the number of time-dependent variable\n",
        "- Model dimensionality\n",
        "  - $k(f)$ is the number of lags for each frequency\n",
        "  - $\\tau_{\\text{max}}$ is the number of steps ahead that is forecasted for the dependent variable $y$\n",
        "  - $N$ is the number of time steps that feed into the attention layer\n"
      ],
      "id": "761b20d9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: class tft\n",
        "\n",
        "class TFT(keras.Model):\n",
        "    def __init__(\n",
        "        self,\n",
        "        quantiles=[0.05, 0.25, 0.5, 0.75, 0.95],\n",
        "        d_model:int=16, # Embedding size, $d_\\text{model}$\n",
        "        output_size:int=1, # How many periods to nowcast/forecast?\n",
        "        n_head:int=4,\n",
        "        dropout_rate:float=0.1,\n",
        "        skip_attention:bool=False, # Build a partial TFT without attention\n",
        "        **kwargs\n",
        "    ):\n",
        "        super(TFT, self).__init__(**kwargs)\n",
        "        self.quantiles = quantiles\n",
        "        self.d_model = d_model\n",
        "        self.output_size = output_size\n",
        "        self.n_head = n_head\n",
        "        self.dropout_rate = dropout_rate\n",
        "        self.skip_attention = skip_attention\n",
        "\n",
        "    def build(self, input_shape):\n",
        "        super(TFT, self).build(input_shape)\n",
        "        \n",
        "        self.input_layer = InputTFT(\n",
        "            d_model=self.d_model,\n",
        "            name=\"input\"\n",
        "        )\n",
        "        self.svars = StaticVariableSelection(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            name=\"static_variable_selection\"\n",
        "        )\n",
        "        self.tvars_hist = TemporalVariableSelection(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            name=\"historical_variable_selection\"\n",
        "        )\n",
        "        self.tvars_fut = TemporalVariableSelection(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            name=\"future_variable_selection\"\n",
        "        )\n",
        "        self.static_context_s_grn = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=False,\n",
        "            name=\"static_context_for_variable_selection\"\n",
        "        )\n",
        "        self.static_context_h_grn = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=False,\n",
        "            name=\"static_context_for_LSTM_state_h\"\n",
        "        )\n",
        "        self.static_context_c_grn = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=False,\n",
        "            name=\"static_context_for_LSTM_state_c\"\n",
        "        )\n",
        "        self.static_context_e_grn = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=False,\n",
        "            name=\"static_context_for_enrichment_of\"\n",
        "        )\n",
        "        self.temporal_features = TemporalFeatures(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            name=\"LSTM_encoder\"\n",
        "        )\n",
        "        self.static_context_enrichment = GatedResidualNetwork(\n",
        "            d_model=self.d_model,\n",
        "            dropout_rate=self.dropout_rate,\n",
        "            use_time_distributed=True,\n",
        "            name=\"static_context_enrichment\"\n",
        "        )\n",
        "        if not self.skip_attention:\n",
        "            self.attention = InterpretableMultiHeadAttention(\n",
        "                n_head=self.n_head,\n",
        "                d_model=self.d_model,\n",
        "                dropout_rate=self.dropout_rate,\n",
        "                name=\"attention_heads\"\n",
        "            )\n",
        "            self.attention_gating = GatedLinearUnit(\n",
        "                d_model=self.d_model,\n",
        "                dropout_rate=self.dropout_rate,\n",
        "                use_time_distributed=True,\n",
        "                activation=None,\n",
        "                name=\"attention_gating\"\n",
        "            )\n",
        "            self.attn_grn = GatedResidualNetwork(\n",
        "                d_model=self.d_model,\n",
        "                dropout_rate=self.dropout_rate,\n",
        "                use_time_distributed=True,\n",
        "                name=\"output_nonlinear_processing\"\n",
        "            )\n",
        "            self.final_skip = GatedLinearUnit(\n",
        "                d_model=self.d_model,\n",
        "                dropout_rate=self.dropout_rate,\n",
        "                use_time_distributed=True,\n",
        "                activation=None,\n",
        "                name=\"final_skip_connection\"\n",
        "            )\n",
        "            self.add = keras.layers.Add()\n",
        "        self.l_norm = keras.layers.LayerNormalization()\n",
        "        \n",
        "        self.flat = keras.layers.Flatten(name=\"flatten\")\n",
        "\n",
        "\n",
        "        # Output layers:\n",
        "        # In order to enforce monotonicity of the quantiles, forecast only the lowest quantile\n",
        "        # from a base forecast layer, and use output_len - 1 additional layers with ReLU activation\n",
        "        # to produce the difference between the current quantile and the previous one\n",
        "        output_len = len(self.quantiles)\n",
        "\n",
        "        self.base_output_layer = keras.layers.TimeDistributed(\n",
        "            keras.layers.Dense(1),\n",
        "            name=\"output\"\n",
        "        )\n",
        "        def elu_plus(x):\n",
        "            return keras.activations.elu(x) + 1\n",
        "\n",
        "        self.quantile_diff_layers = [\n",
        "            keras.layers.TimeDistributed(\n",
        "                keras.layers.Dense(1, activation=elu_plus),\n",
        "                name=f\"quantile_diff_{i}\"\n",
        "            ) \n",
        "            for i in range(output_len - 1)\n",
        "        ]\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super().get_config()\n",
        "        config.update(\n",
        "            {\n",
        "                \"quantiles\": self.quantiles,\n",
        "                \"d_model\": self.d_model,\n",
        "                \"output_size\": self.output_size,\n",
        "                \"n_head\": self.n_head,\n",
        "                \"dropout_rate\" :self.dropout_rate,\n",
        "                \"skip_attention\":  self.skip_attention,\n",
        "            }\n",
        "        )\n",
        "        return config\n",
        "    \n",
        "    def call(\n",
        "        self,\n",
        "        inputs,\n",
        "        training=None\n",
        "    ):\n",
        "        \"Creates the model architecture\"\n",
        "        \n",
        "        # embedding the inputs\n",
        "        cont_hist, cat_hist, cat_fut, cat_stat = inputs\n",
        "        if len(cat_stat.shape) == 2:\n",
        "            cat_stat = keras.ops.expand_dims(cat_stat, axis=-1)\n",
        "            \n",
        "        xi_hist, xi_fut, xi_stat = self.input_layer([cont_hist, cat_hist, cat_fut, cat_stat])\n",
        "\n",
        "        # selecting the static covariates\n",
        "        static_selected_vars, static_selection_weights = self.svars(xi_stat, training=training)\n",
        "\n",
        "        # create context vectors from static data\n",
        "        c_s, _ = self.static_context_s_grn(static_selected_vars, training=training) # for variable selection\n",
        "        c_h, _ = self.static_context_h_grn(static_selected_vars, training=training) # for LSTM state h\n",
        "        c_c, _ = self.static_context_c_grn(static_selected_vars, training=training) # for LSTM state c\n",
        "        c_e, _ = self.static_context_e_grn(static_selected_vars, training=training) # for context enrichment of post-LSTM features\n",
        "\n",
        "        # temporal variable selection\n",
        "        hist_selected_vars, hist_selection_weights = self.tvars_hist(\n",
        "            [xi_hist, c_s],\n",
        "            training=training\n",
        "        )\n",
        "        fut_selected_vars, fut_selection_weights = self.tvars_fut(\n",
        "            [xi_fut, c_s],\n",
        "            training=training\n",
        "        )\n",
        "        input_embeddings = keras.ops.concatenate(\n",
        "            [hist_selected_vars, fut_selected_vars],\n",
        "            axis=1\n",
        "        )\n",
        "\n",
        "        features = self.temporal_features(\n",
        "            [hist_selected_vars, fut_selected_vars, c_h, c_c],\n",
        "            training=training\n",
        "        )\n",
        "        \n",
        "        # static context enrichment\n",
        "        enriched, _ = self.static_context_enrichment(\n",
        "            features, \n",
        "            additional_context=keras.ops.expand_dims(c_e, axis=1),\n",
        "            training=training\n",
        "        )\n",
        "        if not self.skip_attention:\n",
        "            mask = get_decoder_mask(enriched)\n",
        "            attn_output, self_attn = self.attention(\n",
        "                q=enriched,\n",
        "                k=enriched,\n",
        "                v=enriched,\n",
        "                mask=mask,\n",
        "                training=training\n",
        "            )\n",
        "            attn_output, _ = self.attention_gating(attn_output)\n",
        "            output = self.add([enriched, attn_output])\n",
        "            output = self.l_norm(output)\n",
        "            output, _ = self.attn_grn(output)\n",
        "            output, _ = self.final_skip(output)\n",
        "            output = self.add([features, output])\n",
        "        else:\n",
        "            output = enriched\n",
        "        output = self.l_norm(output)\n",
        "        \n",
        "        # Base quantile output\n",
        "        base_output = output[Ellipsis,hist_selected_vars.shape[1]:,:]\n",
        "        base_quantile = self.base_output_layer(base_output)\n",
        "                \n",
        "        # Additional layers for remaining quantiles\n",
        "        quantile_outputs = [base_quantile]\n",
        "        for i in range(len(self.quantiles) - 1):\n",
        "            quantile_diff = self.quantile_diff_layers[i](base_output)\n",
        "            quantile_output = quantile_outputs[-1] + quantile_diff\n",
        "            quantile_outputs.append(quantile_output)\n",
        "\n",
        "        final_output = keras.ops.concatenate(quantile_outputs, axis=-1)\n",
        "        \n",
        "        return final_output"
      ],
      "id": "class-tft",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-summary_tft\n",
        "#| tbl-cap: Summary of TFT Model\n",
        "\n",
        "dim = 16 # arbitrary dimension\n",
        "\n",
        "freqs = [\"m\", \"d\"]\n",
        "\n",
        "inputs = {f: keras.layers.Input(shape=(None,1), name=f) for f in freqs}\n",
        "\n",
        "encoded_inputs = {\n",
        "    k: keras.layers.TimeDistributed(\n",
        "        keras.layers.Dense(dim),\n",
        "        name=f\"encoding__{k}\"\n",
        "    )(v)\n",
        "    for k, v in inputs.items()\n",
        "}\n",
        "\n",
        "Attns = []\n",
        "LSTMs = []\n",
        "for k, v in encoded_inputs.items():\n",
        "    attn, attn_weights = ScaledDotProductAttention(name=f\"Attention__freq_{k}\")(q=v, k=v, v=v, mask=None)\n",
        "    Attns.append(attn)\n",
        "    lstm = keras.layers.LSTM(units=dim, return_sequences=False, name=f\"LSTM__freq_{k}\")(attn)\n",
        "    LSTMs.append(lstm)\n",
        "\n",
        "encoded_series = keras.layers.Concatenate(name=\"encoded_series\")(LSTMs)\n",
        "out = keras.layers.Dense(units = dim, activation=\"relu\")(encoded_series)\n",
        "out = keras.layers.Dense(units=1)(out)\n",
        "\n",
        "nn_sdpa = keras.Model(\n",
        "    inputs=inputs, \n",
        "    outputs=out,\n",
        "    name=\"Attention\"\n",
        ")\n",
        "nn_sdpa.compile(loss=keras.losses.MeanSquaredError())\n",
        "nn_sdpa.summary()\n",
        "\n",
        "tft = TFT()"
      ],
      "id": "tbl-summary_tft",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Nowcasting inflation with a simple model {#sec-nowcast}\n",
        "\n",
        "It all boils down to this: using past data, coupled with higher frequency current data, to nowcast current values. Continuing with the simplistic example in this page, now it is time to nowcast monthly inflation from its lags and from daily changes in oil prices.\n",
        "\n",
        "\n",
        "\n",
        "## References\n",
        "\n",
        "::: {#refs}\n",
        ":::"
      ],
      "id": "7c023c00"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/douglasaraujo/Coding/.venv_gingado/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}